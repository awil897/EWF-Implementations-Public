<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PowerShellJMC</name>
    </assembly>
    <members>
        <member name="M:PowerShellJMC.Common.Providers.YellowHammerFD.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Yellow Hammer Fraud Detection provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.YellowHammerFD.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Yellow Hammer provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.YellowHammerFD.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Yellow Hammer
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.AlertCenter.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Alert Center provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.AlertCenter.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Alert Center provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.AlertCenter.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with AlertCenter.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Argo.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Argo provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Argo.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Argo provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Argo.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Argo
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Broadcastevent.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Synergy provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Broadcastevent.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Synergy provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Broadcastevent.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with p adapter extension.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Bsa.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the BSA provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Bsa.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the BSA provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Bsa.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with BAS.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Cif2020.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the CIF2020 provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Cif2020.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the CIF2020 provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Cif2020.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with cif2020.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Cspi.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the CSPI provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Cspi.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the CSPI provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Cspi.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with CPSI
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.CoreDirector.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the core director provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.CoreDirector.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the core director provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.CoreDirector.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Core Director.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.CpsRtp.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the CPS RTP provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.CpsRtp.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the CPS RTP provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.CpsRtp.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with CPS RTP.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Eems.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the EEMS provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Eems.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the EEMS provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Eems.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with EEMS
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Enterpriselogging.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Enterprise Logging provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Enterpriselogging.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Enterprise Logging provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Enterpriselogging.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Enterprise Logging
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.EnterpriseNotification.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the enterprise notification.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.EnterpriseNotification.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the enterprise notification.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.EnterpriseNotification.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Enterprise Notification.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.EnterpriseWorkflow.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Process the Enterprise Workflow provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.EnterpriseWorkflow.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Process the Enterprise Workflow provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.EnterpriseWorkflow.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Enterprise Workflow.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Episys.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the episys provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Episys.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the episys provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Episys.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Episys
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.FedLineGlobal.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Fed Line Wire provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.FedLineGlobal.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Fed Line Wire provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.FedLineGlobal.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with FedLine Global
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.FourSight.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Process the 4|Sight provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.FourSight.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the net teller provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.FourSight.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with p adapter extension.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.InterNationalWires.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the International Wires provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.InterNationalWires.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the International Wires provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.InterNationalWires.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with International Wires
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Italk.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the iTalk provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Italk.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the iTalk provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Italk.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with iTalk
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.JhaEnterCrm.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the JHA Enterprise CRM provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.JhaEnterCrm.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the JHA Enterprise CRM provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.JhaEnterCrm.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with JHA Enterprise CRM
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.JhaPayCenter.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the JHA Pay Center provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.JhaPayCenter.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the JHA Pay Center provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.JhaPayCenter.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with JHA PayCenter
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.MultiFactorAuth.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the multi factor authentication.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.MultiFactorAuth.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the multi factor authentication.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.MultiFactorAuth.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with MultiFactorAuth
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.NetTeller.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the net teller provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.NetTeller.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the net teller provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.NetTeller.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Net Teller
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Odi.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the ODI provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Odi.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the ODI provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Odi.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with ODI
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.OnBoardDeposit.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Synergy provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.OnBoardDeposit.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Synergy provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.OnBoardDeposit.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with OnBoard Deposit
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.OnBoardLoan.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Synergy provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.OnBoardLoan.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Synergy provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.OnBoardLoan.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with OnBoard Loan
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.PadapterWebService.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the pAdapter web service provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.PadapterWebService.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the pAdapter web service provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.PadapterWebService.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with p adapter webservice.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Passport.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Passport provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Passport.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Passport provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Passport.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Passport
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Pps.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the PPS provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Pps.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the PPS provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Pps.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with PPS
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.ProviderBase.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            This one does map to a usable SG institution.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.ProviderBase.GetProviderFromPipelineObject(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider)">
            <summary>
            Gets the provider from pipeline object. "Complicated"
            </summary>
            <param name="pipelineProvider">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Pscu.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the PSCU provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Pscu.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the PSCU provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Pscu.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with PSCU
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.PscuCdeTranslator.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the PSCU CDE Translator provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.PscuCdeTranslator.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the net teller provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.PscuCdeTranslator.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with PSCUCDE
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.PscuTranslator.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the PSCU Translator provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.PscuTranslator.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the PSCU Translator provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.PscuTranslator.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with PSCU Translator
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Silverlake.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Silverlake provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Silverlake.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Silverlake provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Silverlake.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Silverlake.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.SymantecMfa.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Symantec MFA provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.SymantecMfa.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Symantec MFA provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.SymantecMfa.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Symantec MFA
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.SymantecVip.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Symantec VIP provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.SymantecVip.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Symantec VIP provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.SymantecVip.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Symantec VIP
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Synapsys.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Synapsys provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Synapsys.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Synapsys provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Synapsys.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Synapsys.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Synergy.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Synergy provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Synergy.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Synergy provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Synergy.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Synergy
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Vertex.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Vertex provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Vertex.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Vertex provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.Vertex.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Vertex.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.YellowHammer.Process(PowerShellJMC.ServiceGateway.Provider.AddSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Yellow Hammer provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.YellowHammer.Process(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider,PowerShellJMC.JMCInstitutionServiceReference.Institution)">
            <summary>
            Processes the Yellow Hammer provider.
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Providers.YellowHammer.Map(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with Yellow Hammer
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="T:PowerShellJMC.Common.EEEnterpriseAuditAdminServiceHelper">
            <summary>
            Institution Service Helper
            </summary>
        </member>
        <member name="M:PowerShellJMC.Common.EEEnterpriseAuditAdminServiceHelper.AddInstitution(PowerShellJMC.EnterpriseEvent.AddEEInstitution,System.Int32@)">
            <summary>
            Adds the institution.
            </summary>
            <param name="pipelineInstitution">The pipeline institution.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.EEEnterpriseAuditAdminServiceHelper.UpdateInstitution(PowerShellJMC.EnterpriseEvent.UpdateEEInstitution)">
            <summary>
            Updates the institution.
            </summary>
            <param name="pipelineInstitution">The pipeline institution.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.EEEnterpriseAuditAdminServiceHelper.RemoveInstitution(PowerShellJMC.EnterpriseEvent.RemoveEEInstitution)">
            <summary>
            Removes the institution.
            </summary>
            <param name="pipelineInstitution">The pipeline institution.</param>
        </member>
        <member name="M:PowerShellJMC.Common.EEEnterpriseAuditAdminServiceHelper.GetSubscriber(PowerShellJMC.EnterpriseEvent.GetEESubscriber)">
            <summary>
            Removes the institution.
            </summary>
            <param name="pipelineInstitution">The pipeline institution.</param>
        </member>
        <member name="M:PowerShellJMC.Common.EEEnterpriseAuditAdminServiceHelper.AddSubscriber(PowerShellJMC.EnterpriseEvent.AddEESubscriber)">
            <summary>
            Removes the institution.
            </summary>
            <param name="pipeline">The pipeline subscriber.</param>
        </member>
        <member name="M:PowerShellJMC.Common.EEEnterpriseAuditAdminServiceHelper.AddInstitutionSubscription(PowerShellJMC.EnterpriseEvent.AddEEInstitutionSubscription)">
            <summary>
            Removes the institution.
            </summary>
            <param name="pipeline">The pipeline institution subscription.</param>
        </member>
        <member name="M:PowerShellJMC.Common.EEEnterpriseAuditAdminServiceHelper.RemoveInstitutionSubscription(PowerShellJMC.EnterpriseEvent.RemoveEEInstitutionSubscription)">
            <summary>
            Removes the institution.
            </summary>
            <param name="pipeline">The pipeline institution subscription.</param>
        </member>
        <member name="M:PowerShellJMC.Common.DLIAuthorizationAdminServiceHelper.AddUser(PowerShellJMC.InternationalWires.AddDLIUser)">
            <summary>
            Adds the DLI user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateClientInstitutionService(SharedJMC.JMCConnection)">
            <summary>
            Creates the client institution service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateClientCertificateStoreService(SharedJMC.JMCConnection)">
            <summary>
            Creates the client Certificate Store Service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateUserClaimServiceService(SharedJMC.JMCConnection)">
            <summary>
            Creates the client CreateIdentityManagement service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateBeOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Creates the be operation authentication service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateInfraCommonOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Create Infrastructure Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateSgCommonOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Create sg Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreatePsCommonOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Create ps Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreatePsStorageService(SharedJMC.JMCConnection)">
            <summary>
            Create ps Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateElCommonOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Create el Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateFiCommonOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Create fi Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateImsCommonOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Create ims Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateEaCommonOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Create ea Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateInfraProductService(SharedJMC.JMCConnection)">
            <summary>
            Create ea Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateInfraFarmService(SharedJMC.JMCConnection)">
            <summary>
            Create farm Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateEeCommonOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Create ee Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateEeEnterpriseAuditAdminService(SharedJMC.JMCConnection)">
            <summary>
            Create ee Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateEeAuthorizationAdministrationService(SharedJMC.JMCConnection)">
            <summary>
            Create ee Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateBeCommonOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Create be Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateInfraCertificateService(SharedJMC.JMCConnection)">
            <summary>
            Create Infrastructure Common Config Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateEaOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Creates the be operation authentication service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateDliOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Creates the dli operation authentication service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateDliAdminService(SharedJMC.JMCConnection)">
            <summary>
            Creates the dli admin service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateDlwOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Creates the dlw operation authentication service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateDlwLtermService(SharedJMC.JMCConnection)">
            <summary>
            Creates the dlw lterm service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateDlwSubscriberService(SharedJMC.JMCConnection)">
            <summary>
            Creates the dlw lterm service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateElOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Creates the el operation authentication service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateImsOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Creates the ims operation authentication service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreatePsOperationAuthService(SharedJMC.JMCConnection)">
            <summary>
            Creates the ps operation authentication service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateProviderTypeService(SharedJMC.JMCConnection)">
            <summary>
            Creates the provider type service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateConfiguredProviderService(SharedJMC.JMCConnection)">
            <summary>
            Creates the configured provider service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateSGOperationAuthorizationService(SharedJMC.JMCConnection)">
            <summary>
            Creates the sg operation authorization service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateImportPackageService(SharedJMC.JMCConnection)">
            <summary>
            Creates the import package service.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateEndpointServiceClient(SharedJMC.JMCConnection)">
            <summary>
            Create Endpoint Service Client
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.CreateWsHttpBinding(SharedJMC.JMCConnection)">
            <summary>
            Creates the ws HTTP binding.
            </summary>
            <param name="pConnection">The p connection.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelperServices.BypassCertificateError">
            <summary>
            solution for exception
            System.Net.WebException: 
            The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel. ---> System.Security.Authentication.AuthenticationException: The remote certificate is invalid according to the validation procedure.
            </summary>
        </member>
        <member name="T:PowerShellJMC.Common.ProviderMapper">
            <summary>
            This will map objects from SG into thew new-SGProvider objects
            </summary>
        </member>
        <member name="M:PowerShellJMC.Common.ProviderMapper.MapSGProvider_pAdapterExtension(PowerShellJMC.JMCInstitutionServiceReference.Institution,PowerShellJMC.JMCConfiguredProviderServiceReference.ConfiguredProvider)">
            <summary>
            Maps the sg provider object with p adapter extension.
            </summary>
            <param name="pInstitution">The p institution.</param>
            <param name="pSelectedProvider">The p selected provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Data.GetModUser">
            <summary>
            Gets the user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Data.GetDomainUser">
            <summary>
            Gets the user@domain.com user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Data.GetHttpUri(System.String,System.String)">
            <summary>
            Gets the HTTP URI. Will build based off of a servername or endpoint.
            </summary>
            <param name="providerHostName">Name of the provider host.</param>
            <param name="address">The address.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Data.GetHttpsUri(System.String,System.String)">
            <summary>
            Gets the HTTPs URI. Will build based off of a servername or endpoint.
            </summary>
            <param name="providerHostName">Name of the provider host.</param>
            <param name="address">The address.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Data.GetIssuerName(System.String)">
            <summary>
            Gets the name of the issuer. Will passtrough an edpoint or check if only a server name to build https://servername/adfs/services/trust/13/usernamemixed
            </summary>
            <param name="providerHostName">Name of the provider host.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Data.ConvertInfo(PowerShellJMC.JMCInstitutionServiceReference.InformationMessage[])">
            <summary>
            Converts the information error msg info to a string. 
            </summary>
            <param name="informationMessages">The information messages.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.Data.ConvertInfo(System.String[])">
            <summary>
            Converts the information messages to a string.
            </summary>
            <param name="informationMessages">The information messages.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.IMSServiceHelper.AddIMSCustomClaim(PowerShellJMC.IdentityManagement.AddIMSCustomClaim)">
            <summary>
            Adds the ims custom claim.
            </summary>
            <param name="pipeLineObject">The pipe line object.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.IMSServiceHelper.GetIMSCustomClaim(PowerShellJMC.IdentityManagement.GetIMSCustomClaim)">
            <summary>
            Gets the ims custom claim.
            </summary>
            <param name="pipeLineObject">The pipe line object.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.AppConfigHelper.ChangeAppConfig(System.String)">
            <summary>
            Use your own App.Config file instead of the default.
            </summary>
            <param name="NewAppConfigFullPathName"></param>
        </member>
        <member name="M:PowerShellJMC.Common.AppConfigHelper.ResetConfigMechanism">
            <summary>
            Remove cached values from ClientConfigPaths.
            Call this after changing path to App.Config.
            </summary>
        </member>
        <member name="M:PowerShellJMC.Common.ClientHelper.SetJMCConnection(SharedJMC.JMCConnection)">
            <summary>
            Sets the JMC connection.
            </summary>
            <param name="pConnection">The p connection.</param>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.isClient">
            <summary>
            Gets or sets the Institution Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.dlwLtermClient">
            <summary>
            Gets or sets the Fedline LTERM Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.dlwSubscriberClient">
            <summary>
            Gets or sets the Fedline LTERM Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.beAuthClient">
            <summary>
            Gets or sets the Institution Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.infraCommonConfigClient">
            <summary>
            Gets or sets the common infra structure Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.sgCommonConfigClient">
            <summary>
            Gets or sets the common sg Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.psCommonConfigClient">
            <summary>
            Gets or sets the common ps Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.psStorageClient">
            <summary>
            Gets or sets the storage ps Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.elCommonConfigClient">
            <summary>
            Gets or sets the common El Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.fiCommonConfigClient">
            <summary>
            Gets or sets the common institution Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.imsCommonConfigClient">
            <summary>
            Gets or sets the common ims Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.eaCommonConfigClient">
            <summary>
            Gets or sets the common ea Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.eeCommonConfigClient">
            <summary>
            Gets or sets the common ee Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.eeEnterpriseAuditAdminClient">
            <summary>
            Gets or sets the common ee Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.eeAuthorizationAdministrationClient">
            <summary>
            Gets or sets the common ee Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.beCommonConfigClient">
            <summary>
            Gets or sets the common be Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.infraCertificateClient">
            <summary>
            Gets or sets the common infra structure Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.infraProductClient">
            <summary>
            Gets or sets the common ea Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.infraFarmClient">
            <summary>
            Gets or sets the farm Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.eaAuthClient">
            <summary>
            Gets or sets the Institution Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.dliAuthClient">
            <summary>
            Gets or sets the Operation Authorization Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.dliAdminClient">
            <summary>
            Gets or sets the Operation Authorization Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.dlwAuthClient">
            <summary>
            Gets or sets the Operation Authorization Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.elAuthClient">
            <summary>
            Gets or sets the Institution Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.imsAuthClient">
            <summary>
            Gets or sets the Institution Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.psAuthClient">
            <summary>
            Gets or sets the Institution Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.certStoreClient">
            <summary>
            Gets or sets the Institution Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.ptClient">
            <summary>
            Gets or sets the ProviderType Service client.
            </summary>
            <value>
            The pt client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.cpClient">
            <summary>
            Gets or sets the ConfiguredProvider Service client.
            </summary>
            <value>
            The cp client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.sgoaClient">
            <summary>
            Gets or sets the ServiceGateway Operation Authorization Service client.
            </summary>
            <value>
            The sgoa client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.ipClient">
            <summary>
            Gets or sets the ImportPackageService client.
            </summary>
            <value>
            The ip client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.imsUserClaimClient">
            <summary>
            Gets or sets the IdentityManagement Service client.
            </summary>
            <value>
            The ip client.
            </value>
        </member>
        <member name="P:PowerShellJMC.Common.ClientHelper.sgEndpointClient">
            <summary>
            Gets or sets the Institution Service client.
            </summary>
            <value>
            The is client.
            </value>
        </member>
        <member name="T:PowerShellJMC.Common.SGInstitutionServiceHelper">
            <summary>
            Institution Service Helper
            </summary>
        </member>
        <member name="M:PowerShellJMC.Common.SGInstitutionServiceHelper.AddInstitution(PowerShellJMC.ServiceGateway.Institution.AddSGInstitution)">
            <summary>
            Adds the institution.
            </summary>
            <param name="pipeline">The pipeline institution.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.SGInstitutionServiceHelper.UpdateInstitution(PowerShellJMC.ServiceGateway.Institution.UpdateSGInstitution)">
            <summary>
            Updates the institution.
            </summary>
            <param name="pipelineInstitution">The pipeline institution.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.SGInstitutionServiceHelper.RemoveInstitution(PowerShellJMC.ServiceGateway.Institution.RemoveSGInstitution)">
            <summary>
            Removes the institution.
            </summary>
            <param name="pipelineSGInstitution">The pipeline sg institution.</param>
        </member>
        <member name="M:PowerShellJMC.Common.SGInstitutionServiceHelper.ImportInsitution(PowerShellJMC.ServiceGateway.Institution.ImportSGInstitution)">
            <summary>
            Imports the insitution.
            </summary>
            <param name="pipelineInstitution">The pipeline institution.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.SGInstitutionServiceHelper.ExportInsitution(PowerShellJMC.ServiceGateway.Institution.ExportSGInstitution)">
            <summary>
            Exports the insitution.
            </summary>
            <param name="pipelineInstitution">The pipeline institution.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.SGInstitutionServiceHelper.GetAbaEnv(System.String)">
            <summary>
            Gets the aba env from Name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ProviderServiceHelper.AddProvider(PowerShellJMC.ServiceGateway.Provider.AddSGProvider)">
            <summary>
            Adds the specified service gateway provider.
            </summary>
            <param name="pipeline">The Add sg provider.</param>
        </member>
        <member name="M:PowerShellJMC.Common.ProviderServiceHelper.UpdateProvider(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider)">
            <summary>
            Updates the specified service gateway provider.
            </summary>
            <param name="pipeline">The update sg provider.</param>
        </member>
        <member name="M:PowerShellJMC.Common.ProviderServiceHelper.Remove(PowerShellJMC.ServiceGateway.Provider.RemoveSGProvider)">
            <summary>
            Removes the specified service gateway provider.
            </summary>
            <param name="pipeline">The remove sg provider.</param>
        </member>
        <member name="M:PowerShellJMC.Common.ProviderServiceHelper.GetProviderFromPipelineObject(PowerShellJMC.ServiceGateway.Provider.AddSGProvider)">
            <summary>
            Gets the provider from pipeline object. "Complicated"
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="M:PowerShellJMC.Common.ProviderServiceHelper.GetProviderFromPipelineObject(PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider)">
            <summary>
            Gets the provider from pipeline object. "Complicated"
            </summary>
            <param name="pipeline">The pipeline provider.</param>
            <returns></returns>
        </member>
        <member name="T:PowerShellJMC.EnterpriseAudit.AddEAUser">
            <summary>
            <para type="name">Add-EAUser</para>
            <para type="synopsis">Adds a user to institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-EAUser cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGAddUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-EAUser -UserName "user@domain.com" -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Add-EAUser -UserName "user@domain.com" -Operations Ping -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-EAUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-EAUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseAudit.AddEAUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseAudit.AddEAUser.Operations">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseAudit.AddEAUser.OperationGroups">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.EnterpriseAudit.AddEAUser.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="M:PowerShellJMC.EnterpriseAudit.AddEAUser.AddUser(PowerShellJMC.EnterpriseAudit.AddEAUser)">
            <summary>
            Adds the BE user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.EnterpriseAudit.GetEAUser">
            <summary>
            <para type="name">Get-EAUser</para>
            <para type="synopsis">Gets a user security on a local or remote Enterprise Audit server.</para>
            <para type="description">The Get-EAUser cmdlet gets users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Get-EAUser, pipe an object or pipe an csv file or pass parameters to Get-EAUser.</para>
            </summary>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-EAUser</code>
              <para>This takes a csv file with named columns and pipe's them into Get-EAUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-EAUser -UserName user@domain.com</code>
              <para>Gets a specific user, -Verbose is optional...</para>
              <para>
              </para>
            </example>    
        </member>
        <member name="P:PowerShellJMC.EnterpriseAudit.GetEAUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseAudit.RemoveEAUser">
            <summary>
            <para type="name">Remove-EAUser</para>
            <para type="synopsis">Removes a user from a local or remote Enterprise Audit server.</para>
            <para type="description">The Remove-EAUser cmdlet removes users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Remove-EAUser, pipe an object or pipe an csv file or pass parameters to Remove-EAUser.</para>
            </summary>
            <para type="link">Get-EAUser</para>
            <para type="link">Add-EAUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-EAUser</code>
              <para>This takes a csv file with named columns and pipe's them into Remove-BEUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseAudit.RemoveEAUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.EnterpriseAudit.RemoveEAUser.RemoveUser(PowerShellJMC.EnterpriseAudit.RemoveEAUser)">
            <summary>
            Removes the user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.InternationalWires.AddDLIClientID">
            <summary>
            <para type="name">Add-DLIClientID</para>
            <para type="synopsis">Adds one or more ClientID's screen in on a local or remote DLW/Fedline Global server.</para>
            <para type="description">The Add-DLIClientID cmdlet Adds client id's to DLI FI's on a local server or on a remote server.</para>
            <para type="description">To use Add-DLIClientID, pipe an object or pipe an csv file or pass parameters to Add-DLIClientID.</para>
            </summary>
            <para type="link">Add-DLIUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-DLIClientID -ABA 111111111 -ClientID 222222222</code>
              <para>This Adds only 1 client id with to the specified ABA in DLI, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\> Add-DLIClientID -ABA 111111111 -ClientID 222222222, 333333333</code>
              <para>This Adds many client id's with to the specified ABA in DLI, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-DLIClientID</code>
              <para>This takes a csv file with named columns and pipe's them into Add-DLIClientID, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIClientID.ABA">
            <summary>
            <para type="description">(Optional) Filters by the specified LeadAba on LTerm.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIClientID.ClientID">
            <summary>
            <para type="description">The Client Id, only supports 5 aba's, if left blank will use ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIClientID.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.InternationalWires.AddDLIClientID.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="T:PowerShellJMC.InternationalWires.RemoveDLIInstitution">
            <summary>
            <para type="name">Remove-DLIInstitution</para>
            <para type="synopsis">Removes an institution from DLI on a local or remote DLW/Fedline Global server.</para>
            <para type="description">The Remove-DLIInstitution cmdlet Removes institutions from DLI on a local server or on a remote server.</para>
            <para type="description">To use Remove-DLIInstitution, pipe an object or pipe an csv file or pass parameters to Remove-DLIInstitution.</para>
            </summary>
            <para type="link">Add-DLIUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Remove-DLIInstitution -Aba 111111112</code>
              <para>This Removes an institution from dli with specified ABA, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-DLIInstitution</code>
              <para>This takes a csv file with named columns and pipe's them into Remove-DLIInstitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.RemoveDLIInstitution.ABA">
            <summary>
            <para type="description">(Optional) Filters by the specified LeadAba on LTerm.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.RemoveDLIInstitution.Force">
            <summary>
            <para type="description">(Optional) toggle force to not be prompted yes or no to delete.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.RemoveDLIInstitution.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.InternationalWires.AddDLIInstitution">
            <summary>
            <para type="name">Add-DLIInstitution</para>
            <para type="synopsis">Adds a Logical Terminal Subscriber from the Manage Logical Terminals screen in on a local or remote DLW/Fedline Global server.</para>
            <para type="description">The Add-DLIInstitution cmdlet Adds Logical Terminal Subscribers from the DLW  on a local server or on a remote server.</para>
            <para type="description">To use Add-DLIInstitution, pipe an object or pipe an csv file or pass parameters to Add-DLIInstitution.</para>
            </summary>
            <para type="link">Add-DLIUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-DLIInstitution -Name PSTest -ABA 111111111 -City Monett -State MO -Country US -BillTo 123</code>
              <para>This Adds an institution to DLI, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-DLIInstitution</code>
              <para>This takes a csv file with named columns and pipe's them into Add-DLIInstitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIInstitution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIInstitution.ABA">
            <summary>
            <para type="description">(Optional) Filters by the specified LeadAba on LTerm.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIInstitution.City">
            <summary>
            <para type="description">City of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIInstitution.State">
            <summary>
            <para type="description">State of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIInstitution.Country">
            <summary>
            <para type="description">Country of the Institution. E.g. {US | Can}</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIInstitution.BillTo">
            <summary>
            <para type="description">The bill To</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIInstitution.ShipTo">
            <summary>
            <para type="description">(Optional) The ship to, use bill to if not specified.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIInstitution.ClientID">
            <summary>
            <para type="description">The Client Id, only supports 5 aba's, if left blank will use ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIInstitution.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.InternationalWires.AddDLIInstitution.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="T:PowerShellJMC.InternationalWires.GetDLIInstitution">
            <summary>
            <para type="name">Get-DLIInstitution</para>
            <para type="synopsis">Gets institutions from DLI on a local or remote DLW/Fedline Global server.</para>
            <para type="description">The Get-DLIInstitution cmdlet gets institutions from DLI on a local server or on a remote server.</para>
            <para type="description">To use Get-DLIInstitution, pipe an object or pipe an csv file or pass parameters to Get-DLIInstitution.</para>
            </summary>
            <para type="link">Add-DLIUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Get-DLIInstitution</code>
              <para>This gets all institutions from DLI, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-DLIInstitution -Aba 111111112</code>
              <para>This gets specified institution from DLI, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-DLIInstitution</code>
              <para>This takes a csv file with named columns and pipe's them into Get-DLIInstitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.GetDLIInstitution.Aba">
            <summary>
            <para type="description">(Optional) Filters by the specified LeadAba on LTerm.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.GetDLIInstitution.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.InternationalWires.AddDLIUser">
            <summary>
            <para type="name">Add-DLIUser</para>
            <para type="synopsis">Adds a user to the Operation Authorization section on a local or remote DLI server.</para>
            <para type="description">The Add-DLIUser cmdlet inserts users into the Operation AUthorization for DLI on a local server or on a remote server.</para>
            </summary>
            <para type="link">Add-DLIInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-DLIUser -UserName "user@domain.com" -Verbose</code>
              <para>This Adds a user to the DLW Operation Authorization, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Add-DLIUser -UserName "user@domain.com" -Operations WireIntlTrnAdd, Ping -Verbose</code>
              <para>This Adds a user to the DLI Operation Authorization and checks the specified operations, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-DLIUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-DLIUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Operation Authorization Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIUser.Operations">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIUser.OperationGroups">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.InternationalWires.AddDLIUser.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseEvent.AddEEInstitution">
            <summary>
            <para type="name">Add-EEInstitution</para>
            <para type="synopsis">Adds institutions on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-SGInstitution cmdlet inserts institutions on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGInsitution.</para>
            </summary>
            <para type="link">Get-EEInstitution</para>
            <para type="link">Remove-EEInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Csv -Path .\inport-file.csv | Add-EEInstitution</code>
              <para>This takes a csv file with named columns and pipe's them into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-EEInstitution</code>
              <para>This takes a csv file with named columns and pipe's them into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Add-EEInstitution -Name TestingJMCPowerShell -Environment PROD -ABA 123456788 -Description "myBank, City - State" -City Monett -State MO -Country US</code>
              <para>Pass parameters into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitution.CompanyId">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitution.InstitutionId">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitution.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitution.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitution.City">
            <summary>
            <para type="description">City of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitution.State">
            <summary>
            <para type="description">State of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitution.Country">
            <summary>
            <para type="description">Country of the Institution. E.g. {US | Can}</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitution.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.EnterpriseEvent.AddEEInstitution.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseEvent.RemoveEEInstitutionSubscription">
            <summary>
            <para type="name">Remove-EEInstitutionSubscription</para>
            <para type="synopsis">Adds a user to institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-SGUser cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGAddUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$institutions = Get-SGInstitution | Out-GridView -PassThru
              $institutions | Add-SGUSer -UserName "user@domain.com" -Operations MFAOOBValidate, MFAQnAPolInq, Ping -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-SGUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-SGUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitutionSubscription.SubscriptionId">
            <summary>
            <para type="description">A user generated string that uniquely identifies the subscription.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitutionSubscription.Product">
            <summary>
            <para type="description">A user generated string that uniquely identifies the subscription.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitutionSubscription.Vendor">
            <summary>
            <para type="description">A user generated string that uniquely identifies the subscription.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitutionSubscription.SubscriptionName">
            <summary>
            <para type="description">A user generated string that uniquely identifies the subscription.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitutionSubscription.InstitutionIds">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitutionSubscription.Institutions">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitutionSubscription.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseEvent.AddEEInstitutionSubscription">
            <summary>
            <para type="name">Add-EEInstitutionSubscription</para>
            <para type="synopsis">Adds a user to institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-SGUser cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGAddUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$institutions = Get-SGInstitution | Out-GridView -PassThru
              $institutions | Add-SGUSer -UserName "user@domain.com" -Operations MFAOOBValidate, MFAQnAPolInq, Ping -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-SGUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-SGUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitutionSubscription.SubscriptionId">
            <summary>
            <para type="description">A user generated string that uniquely identifies the subscription.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitutionSubscription.Product">
            <summary>
            <para type="description">A user generated string that uniquely identifies the subscription.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitutionSubscription.Vendor">
            <summary>
            <para type="description">A user generated string that uniquely identifies the subscription.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitutionSubscription.SubscriptionName">
            <summary>
            <para type="description">A user generated string that uniquely identifies the subscription.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitutionSubscription.InstitutionIds">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitutionSubscription.Institutions">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEInstitutionSubscription.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseEvent.AddEESubscriber">
            <summary>
            <para type="name">Add-BEUser</para>
            <para type="synopsis">Adds a user to institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-BEUser cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGAddUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-BEUser -UserName "user@domain.com" -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Add-BEUser -UserName "user@domain.com" -Operations Ping -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-BEUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-BEUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEESubscriber.SubscriberId">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEESubscriber.Name">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEESubscriber.Description">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEESubscriber.ValidatedConsumerName">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEESubscriber.ValidatedConsumerProduct">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEESubscriber.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.EnterpriseEvent.AddEESubscriber.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseEvent.AddEEUser">
            <summary>
            <para type="name">Add-EEUser</para>
            <para type="synopsis">Adds a user to institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-EEUser cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGAddUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$institutions = Get-SGInstitution | Out-GridView -PassThru
              $institutions | Add-EEUSer -UserName "user@domain.com" -Operations MFAOOBValidate, MFAQnAPolInq, Ping -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-EEUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-EEUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEUser.Operations">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.AddEEUser.OperationGroups">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.EnterpriseEvent.AddEEUser.AddUser(PowerShellJMC.EnterpriseEvent.AddEEUser)">
            <summary>
            Adds the user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.EnterpriseEvent.GetEEInstitution">
            <summary>
            <para type="name">Get-EEInstitution</para>
            <para type="synopsis">Gets institutions on a local or remote ServiceGateway server.</para>
            <para type="description">The Get-SGInstitution cmdlet inserts institutions on a local server or on a remote server.</para>
            <para type="description">To use Get-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGInsitution.</para>
            </summary>
            <para type="link">Add-EEInstitution</para>
            <para type="link">Remove-EEInstitution</para>
            <para type="link">Export-EEInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Export-Excel</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Get-EEInsitution</code>
              <para>This gets all the institutions in ServiceGateway.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-EEInsitution -Name "Bob"</code>
              <para>This gets a single institution in ServiceGateway with the Name Bob.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-EEInsitution -ABA 123456789 -Environment PROD</code>
              <para>This gets a single the institution in ServiceGateway with the specified ABA and env.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-EEInsitution -Name "Bob" -ABA 123456789 -Environment PROD</code>
              <para>This gets a single the institution in ServiceGateway with the specified ABA and Env.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-EEInsitution -ABA 123456789</code>
              <para>This gets all the institutions in ServiceGateway with the specified ABA and any Env.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-EEInsitution | Export-SGInstitution -Path C:\temp\Exported -Password Bob</code>
              <para>This pipes all the institutions to be exported.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-EEInstitution | Out-GridView -PassThru | Export-SGInstitution -path "C:\temp\exported\" -Password Bob</code>
              <para>This sends all the intitutions to a selection grid and then sends those to the Export cmdlet, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEEInstitution.CompanyId">
            <summary>
            <para type="description">Id of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEEInstitution.InstitutionId">
            <summary>
            <para type="description">Id of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEEInstitution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEEInstitution.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEEInstitution.ABA">
            <summary>
            <para type="description">ABA of the Institution.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseEvent.GetEESubscriber">
            <summary>
            <para type="name">Get-EESubsciber</para>
            <para type="synopsis">Gets a user from the institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Get-EESubsciber cmdlet gets users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Get-EESubsciber, pipe an object or pipe an csv file or pass parameters to Get-SGUser.</para>
            </summary>
            <para type="link">Get-EESubsciber</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$institutions = Get-SGInstitution | Out-GridView -PassThru
              $institutions | Get-EESubsciber -Verbose</code>
              <para>This gets a selection of institutions and then Gets the users on the institution(s), -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-EEUser</code>
              <para>This takes a csv file with named columns and pipe's them into Get-EEUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-EESubsciber -Name MyBank -Environment PROD -ABA 123456789 -UserName user@domain.com</code>
              <para>Gets a specific user from a specified institution, -Verbose is optional...</para>
              <para>
              </para>
            </example>    
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEESubscriber.SubscriberId">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEESubscriber.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEESubscriber.Vendor">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEESubscriber.Product">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEESubscription.SubscriberId">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEESubscription.SubscriptionId">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEESubscription.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEESubscription.Vendor">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEESubscription.Product">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseEvent.GetEEUser">
            <summary>
            <para type="name">Get-EEUser</para>
            <para type="synopsis">Gets a user from the institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Get-EEUser cmdlet gets users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Get-EEUser, pipe an object or pipe an csv file or pass parameters to Get-SGUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$institutions = Get-SGInstitution | Out-GridView -PassThru
              $institutions | Get-EEUser -Verbose</code>
              <para>This gets a selection of institutions and then Gets the users on the institution(s), -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-SGUser</code>
              <para>This takes a csv file with named columns and pipe's them into Get-SGUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-SGUser -Name MyBank -Environment PROD -ABA 123456789 -UserName user@domain.com</code>
              <para>Gets a specific user from a specified institution, -Verbose is optional...</para>
              <para>
              </para>
            </example>    
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEEUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.GetEEUser.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseEvent.RemoveEEInstitution">
            <summary>
            <para type="name">Remove-EEInstitution</para>
            <para type="synopsis">Remove institutions from a local or remote ServiceGateway server.</para>
            <para type="description">The Remove-EEInstitution cmdlet Removes institutions from a local server or on a remote server.</para>
            <para type="description">To use Remove-EEInstitution, pipe an object or pipe an excel file or pass parameters to Remove-SGInsitution.</para>
            </summary>
            <para type="link">Import-SGInstitution</para>
            <para type="link">Get-SGInstitution</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-EEInstitution</code>
              <para>This takes a csv file with named columns and pipe's them into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Remove-EEInstitution -Name TestingJMCPowerShell -Environment PROD -ABA 123456788</code>
              <para>Pass parameters into Remove-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Remove-EEInstitution -Environment PROD -ABA 123456788</code>
              <para>Pass parameters into Remove-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Remove-EEInstitution -Name TestingJMCPowerShell</code>
              <para>Pass parameters into Remove-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitution.InstitutionId">
            <summary>
            <para type="description">Id of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitution.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitution.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitution.Force">
            <summary>
            <para type="description">(Optional) toggle force to not be prompted yes or no to delete.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEInstitution.Status">
            <summary>
            <para type="description">Status of the delete.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseEvent.RemoveEEUser">
            <summary>
            <para type="name">Remove-EEUser</para>
            <para type="synopsis">Removes a user from institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Remove-EEUser cmdlet removes users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Remove-SGInsitution, pipe an object or pipe an csv file or pass parameters to Remove-SGUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">Get-SGUser</para>
            <para type="link">Add-SGUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$institutions = Get-SGInstitution | Out-GridView -PassThru
              $institutions | Remove-SGUSer -UserName "user@domain.com" -Verbose</code>
              <para>This gets a selection of institutions and then Removes the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-EEUser</code>
              <para>This takes a csv file with named columns and pipe's them into Remove-SGUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.RemoveEEUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.EnterpriseEvent.RemoveEEUser.RemoveUser(PowerShellJMC.EnterpriseEvent.RemoveEEUser)">
            <summary>
            Removes the user.
            </summary>
            <param name="pipelineUser">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.EnterpriseEvent.UpdateEEInstitution">
            <summary>
            <para type="name">Update-EEInstitution</para>
            <para type="synopsis">Updates an institutions on a local or remote ServiceGateway server.</para>
            <para type="description">The Update-SGInstitution cmdlet updates institutions on a local server or on a remote server.</para>
            <para type="description">To use Update-SGInsitution, pipe an object or pipe an csv file or pass parameters to Update-SGInsitution.</para>
            </summary>
            <para type="link">Get-EEInstitution</para>
            <para type="link">Remove-EEInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Update-EEInstitution -Name TestingJMCPowerShell -Environment PROD -ABA 123456788 -Description "myBank, City - State" -City Monett -State MO -Country US</code>
              <para>Pass parameters into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.UpdateEEInstitution.InstitutionId">
            <summary>
            <para type="description">Id of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.UpdateEEInstitution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.UpdateEEInstitution.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.UpdateEEInstitution.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.UpdateEEInstitution.City">
            <summary>
            <para type="description">City of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.UpdateEEInstitution.State">
            <summary>
            <para type="description">State of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.UpdateEEInstitution.Country">
            <summary>
            <para type="description">Country of the Institution. E.g. {US | Can}</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseEvent.UpdateEEInstitution.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.EnterpriseEvent.UpdateEEInstitution.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="P:PowerShellJMC.JmcCmdlet.JMCConnection">
            <summary>
            <para type="description">(Optional) JMCConnection to ServiceGateway, defaults to localhost.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.JmcCmdlet.Delay">
            <summary>
            <para type="description">(Optional) Allows you to set the milliseconds to delay between each record.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammerFD">
            <summary>
            <para type="name">New-SGProviderYellowHammerFD</para>
            <para type="synopsis">Creates a new Yellow Hammer Fraud Detection Provider object.</para>
            <para type="description">The New-SGProviderYellowHammerFD creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderYellowHammerFD, pipe an object or pipe an excel file or pass parameters to New-SGProviderYellowHammerFD.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderYellowHammerFD</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderYellowHammerFD, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>$YellowHammer = New-SGProviderYellowHammerFD -DefaultEndpoint Servername.com -DefaultEndpointUserName user@domain.com -DefaultEndpointPassword myPassword
            Add-SGProvider -Provider $YellowHammer -Name Matthew -Environment PROD -ABA 123456788 -Verbose</code>
              <para>Creates a New-SGProviderYellowHammerFD and it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammerFD.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammerFD.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammerFD.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammerFD.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammerFD.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammerFD.DefaultEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammerFD.DefaultEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammerFD.DefaultEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent">
            <summary>
            <para type="name">New-SGProviderOnBoardLoan</para>
            <para type="synopsis">Creates a new EnterpriseNotification Provider object.</para>
            <para type="description">The New-SGProviderSynergy creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderSynergy, pipe an object or pipe an excel file or pass parameters to New-SGProviderSynergy.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderSynergy</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderSynergy, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>$Synergy = New-SGProviderSynergy -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword
            Add-SGProvider -Provider $Synergy -Name Matthew -Environment PROD -ABA 123456788 -Verbose</code>
              <para>Creates a New-SGProviderSynergy and it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderSynergy -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -ImageEndpoint inqEndpoint.com -ImageEndpointUserName inqUser@inqDomain.com -ImageEndpointPassword inqPass | Add-SGProvider</code>
              <para>Creates a New-SGProviderSynergy and uses the Image parameters to override this endpoint then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.DefaultEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.DefaultEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.DefaultEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBroadcastEvent.DefaultIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit">
            <summary>
            <para type="name">New-SGProviderOnBoardLoan</para>
            <para type="synopsis">Creates a new EnterpriseNotification Provider object.</para>
            <para type="description">The New-SGProviderSynergy creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderSynergy, pipe an object or pipe an excel file or pass parameters to New-SGProviderSynergy.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderSynergy</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderSynergy, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>$Synergy = New-SGProviderSynergy -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword
            Add-SGProvider -Provider $Synergy -Name Matthew -Environment PROD -ABA 123456788 -Verbose</code>
              <para>Creates a New-SGProviderSynergy and it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderSynergy -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -ImageEndpoint inqEndpoint.com -ImageEndpointUserName inqUser@inqDomain.com -ImageEndpointPassword inqPass | Add-SGProvider</code>
              <para>Creates a New-SGProviderSynergy and uses the Image parameters to override this endpoint then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.CustomerEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.CustomerEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.CustomerEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.CustomerIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.DepositEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.DepositEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.DepositEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardDeposit.DepositIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan">
            <summary>
            <para type="name">New-SGProviderOnBoardLoan</para>
            <para type="synopsis">Creates a new EnterpriseNotification Provider object.</para>
            <para type="description">The New-SGProviderSynergy creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderSynergy, pipe an object or pipe an excel file or pass parameters to New-SGProviderSynergy.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderSynergy</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderSynergy, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>$Synergy = New-SGProviderSynergy -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword
            Add-SGProvider -Provider $Synergy -Name Matthew -Environment PROD -ABA 123456788 -Verbose</code>
              <para>Creates a New-SGProviderSynergy and it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderSynergy -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -ImageEndpoint inqEndpoint.com -ImageEndpointUserName inqUser@inqDomain.com -ImageEndpointPassword inqPass | Add-SGProvider</code>
              <para>Creates a New-SGProviderSynergy and uses the Image parameters to override this endpoint then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.AllEndpointPassword">
            <summary>
            <para type="description">Password for all the endpoints.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.CustomerEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.CustomerEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.CustomerEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.CustomerIssuer">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.LoanEndpoint">
            <summary>
            <para type="description">(Override) Loan endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.LoanEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.LoanEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderOnBoardLoan.LoanIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP">
            <summary>
            <para type="name">New-SGProviderSymantecMFA</para>
            <para type="synopsis">Creates a new ServiceGateway SGProviderSymantecMFA Provider object.</para>
            <para type="description">The New-SGProviderSymantecMFA creates an object that can be filled out with all the values required for the provider.</para>
            <para type="description">To use New-SGProviderSymantecMFA, pipe an object or pipe an excel/csv file or pass parameters to New-SGProviderSymantecMFA.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderSymantecMFA | Add-SGProvider</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderSymantecMFA then send to Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderSymantecMFA -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint "ServerName.com" -Certificate "ims" -CertCacheExpirationTimeInMinutes 5 -ForcePin $false -JurisdictionId 123456789 -TemporaryPasswordExpireDays 1 | Add-SGProvider</code>
              <para>Pass parameters into New-SGProviderSymantecMFA then pipe to Add-SGProvider to add it to the system, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.ManagementServiceEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.QueryServiceEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.AuthenticationServiceEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.CertFilePath">
            <summary>
            <para type="description">Certificate Name</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.CertPassword">
            <summary>
            <para type="description">Certificate Password</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.ForcePin">
            <summary>
            <para type="description">Force Pin</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.JurisdictionId">
            <summary>
            <para type="description">Jurisdiction Id</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecVIP.TemporaryPasswordExpireDays">
            <summary>
            <para type="description">Certificate Cache Expiration Time In Minutes</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider">
            <summary>
            <para type="name">Update-SGProvider</para>
            <para type="synopsis">Updates a provider in an institution on a local or remote ServiceGateway server.</para>
            <para type="description">The Update-SGProvider cmdlet updates providers for institutions on a local server or on a remote server.</para>
            <para type="description">To use Update-SGProvider, pipe an existing object to Update-SGProvider. Update-SGProvider requires the -Provider to be created via New-SGProvider* cmdlets.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">Get-SGProvider</para>
            <para type="link">Add-SGProvider</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$data = Get-SGProvider -Name Matthew -Environment PROD -ABA 123456788 -ProviderTypeName "Multi-Factor Authentication"
               $data.Provider.ProviderName  = "MFA New Name Example"
               $data | Update-SGProvider</code>
              <para>This takes an existing provider, pipes it into Update-SGProvider to update it after it has been changed</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider.Provider">
            <summary>
            <para type="description">Provider object from a Get-SGProvider cmdlet.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider.ProviderTypeName">
            <summary>
            <para type="description">Provider Type Name of the provider. This is located in the JMC, in the institution, on the provider tab, in the 'Provider Type Name' column value is the one needed here.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.UpdateSGProvider.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAEnterCRM">
            <summary>
            <para type="name">New-SGProviderJHAEnterCRM</para>
            <para type="synopsis">Creates a new JHAEnterCRM Provider object.</para>
            <para type="description">The New-SGProviderJHAEnterCRM creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderJHAEnterCRM, pipe an object or pipe an excel file or pass parameters to New-SGProviderJHAEnterCRM.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderJHAEnterCRM</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderJHAEnterCRM, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>$Episys = New-SGProviderJHAEnterCRM -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword
            Add-SGProvider -Provider $Episys -Name Matthew -Environment PROD -ABA 123456788 -Verbose</code>
              <para>Creates a New-SGProviderJHAEnterCRM and it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderJHAEnterCRM -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -InquiryEndpoint inqEndpoint.com -InquiryEndpointUserName inqUser@inqDomain.com -InquiryEndpointPassword inqPass | Add-SGProvider</code>
              <para>Creates a New-SGProviderJHAEnterCRM and uses the Inquiry parameters to override this endpoint then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAEnterCRM.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAEnterCRM.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAEnterCRM.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAEnterCRM.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAEnterCRM.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAEnterCRM.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAEnterCRM.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAEnterCRM.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow">
            <summary>
            <para type="name">New-SGProviderEnterpriseWorkflow</para>
            <para type="synopsis">Creates a new EnterpriseWorkflow Provider object.</para>
            <para type="description">The New-SGProviderEnterpriseWorkflow creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderEnterpriseWorkflow, pipe an object or pipe an excel file or pass parameters to New-SGProviderEnterpriseWorkflow.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderEnterpriseWorkflow</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderEnterpriseWorkflow, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderEnterpriseWorkflow -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderEnterpriseWorkflow then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderEnterpriseWorkflow -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com -InquiryEndpoint inqEndpoint.com -InquiryEndpointUserName inqUser@inqDomain.com -InquiryEndpointPassword inqPass -InquiryIssuer inqIssuer.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderEnterpriseWorkflow using the InquiryEndpoint override then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.InquiryEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.InquiryEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.InquiryEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseWorkflow.InquiryIssuer">
            <summary>
            <para type="description">(Override) Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEEMS">
            <summary>
            <para type="name">New-SGProviderEEMS</para>
            <para type="synopsis">Creates a new EEMS Provider object.</para>
            <para type="description">The New-SGProviderEEMS creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderEEMS, pipe an object or pipe an excel file or pass parameters to New-SGProviderEEMS.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderEEMS</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderEEMS, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderEEMS -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -ClientId "12345" | Add-SGProvider</code>
              <para>Creates a New-SGProviderEEMS then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEEMS.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEEMS.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEEMS.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEEMS.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEEMS.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEEMS.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEEMS.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEEMS.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter">
            <summary>
            <para type="name">New-SGProviderJHAPayCenter</para>
            <para type="synopsis">Creates a new ServiceGateway JHAPayCenter Provider object.</para>
            <para type="description">The New-SGProviderJHAPayCenter creates an object that can be filled out with all the values required for the provider.</para>
            <para type="description">To use New-SGProviderJHAPayCenter, pipe an object or pipe an excel/csv file or pass parameters to New-SGProviderJHAPayCenter.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderJHAPayCenter | Add-SGProvider</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderJHAPayCenter then send to Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderJHAPayCenter -Name Matthew -Environment PROD -ABA 123456788 -ProviderDescription "My JHA Pay Center" -AllEndpoint https://server:port/2008/endpoint.svc -AllEndpointUserName myUsername -AllEndpointPassword myPassword | Add-SGProvider</code>
              <para>Pass parameters into New-SGProviderSynapsys then pipe to Add-SGProvider to add it to the system, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address. Sets both IMS and Transaction endpoints.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint. Sets both IMS and Transaction usernames.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint. Sets both IMS and Transaction passwords.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.IMSEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.IMSEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.IMSEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.TransactionEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.TransactionEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.TransactionEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.PaymentsEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.PaymentsEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.PaymentsEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.DevicesEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.DevicesEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderJHAPayCenter.DevicesEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator">
            <summary>
            <para type="name">New-SGProviderPscuCdeTranslator</para>
            <para type="synopsis">Creates a new PSCU CDE Provider object.</para>
            <para type="description">The New-SGProviderPscuCdeTranslator creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderPscuCdeTranslator, pipe an object or pipe an excel file or pass parameters to New-SGProviderPscuCdeTranslator.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderPSCUCde</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderPSCU, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderPSCU -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -ClientId 1234 -Endpoint "https://bob.com/place" -ForwardToAnotherSG -AllEndpointUserName "bob" -AllEndpointPassword "bob2" -AllEndpointIssuer "jackhenry.com" | Add-SGProvider</code>
              <para>Creates a New-SGProviderPSCU then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.ClientId">
            <summary>
            <para type="description">ClientId for the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.Endpoint">
            <summary>
            <para type="description">Attribute Endpoint for the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.ForwardToAnotherSG">
            <summary>
            <para type="description">Forward To Another ServiceGateway</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint. only used for the forwarder</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuCdeTranslator.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint. only used for the forwarder</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex">
            <summary>
            <para type="name">New-SGProviderSilverlake</para>
            <para type="synopsis">Creates a new ServiceGateway Silverlake Provider object.</para>
            <para type="description">The New-SGProviderSilverlake creates an object that can be filled out with all the values required for the provider.</para>
            <para type="description">To use New-SGProviderSilverlake, pipe an object or pipe an excel/csv file or pass parameters to New-SGProviderSilverlake.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderSilverlake | Add-SGProvider</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderSilverlake then send to Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderSilverlake -Name Matthew -Environment PROD -ABA 123456788 -ProviderHostName 10.1.1.1 -ProviderPort 40001 -ProviderSecurityKey bob -ProviderInstitutionId 20 | Add-SGProvider</code>
              <para>Pass parameters into New-SGProviderSilverlake then pipe to Add-SGProvider to add it to the system, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex.ProviderHostName">
            <summary>
            <para type="description">Hostname of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex.ProviderPort">
            <summary>
            <para type="description">Port of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex.ProviderSecurityKey">
            <summary>
            <para type="description">SecurityKey of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex.ProviderInstitutionId">
            <summary>
            <para type="description">InstitutionId of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex.ProviderUseSSL">
            <summary>
            <para type="description">(Optional) UseSSL of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderVertex.ProviderSocketHeader">
            <summary>
            <para type="description">(Optional) SocketHeader of the provider.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator">
            <summary>
            <para type="name">New-SGProviderPscuTranslator</para>
            <para type="synopsis">Creates a new PSCU Provider object.</para>
            <para type="description">The New-SGProviderPscuTranslator creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderPscuTranslator, pipe an object or pipe an excel file or pass parameters to New-SGProviderPscuTranslator.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderPscuTranslator</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderPscuTranslator, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderPscuTranslator -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -ClientId "12345" | Add-SGProvider</code>
              <para>Creates a New-SGProviderPSCU then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator.ClientId">
            <summary>
            <para type="description">ClientId for the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator.Endpoint">
            <summary>
            <para type="description">Attribute Endpoint for the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator.ForwardToAnotherSG">
            <summary>
            <para type="description">Forward To Another ServiceGateway</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint. only used for the forwarder</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPscuTranslator.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint. only used for the forwarder</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA">
            <summary>
            <para type="name">New-SGProviderBSA</para>
            <para type="synopsis">Creates a new EnterpriseNotification Provider object.</para>
            <para type="description">The New-SGProviderBSA creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderBSA, pipe an object or pipe an excel file or pass parameters to New-SGProviderBSA.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderBSA</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderBSA, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>$BSA = New-SGProviderBSA -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword
            Add-SGProvider -Provider $BSA -Name Matthew -Environment PROD -ABA 123456788 -Verbose</code>
              <para>Creates a New-SGProviderBSA and it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderBSA -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -IMSEndpoint imsEndpoint.com -IMSEndpointUserName imsUser@imsDomain.com -IMSEndpointPassword imsPass | Add-SGProvider</code>
              <para>Creates a New-SGProviderBSA and uses the IMS parameters to override this endpoint then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.IMSEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.IMSEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.IMSEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.CustomerEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.CustomerEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderBSA.CustomerEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer">
            <summary>
            <para type="name">New-SGProviderYellowHammer</para>
            <para type="synopsis">Creates a new EnterpriseNotification Provider object.</para>
            <para type="description">The New-SGProviderYellowHammer creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderYellowHammer, pipe an object or pipe an excel file or pass parameters to New-SGProviderYellowHammer.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderYellowHammer</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderYellowHammer, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>$YellowHammer = New-SGProviderYellowHammer -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword
            Add-SGProvider -Provider $YellowHammer -Name Matthew -Environment PROD -ABA 123456788 -Verbose</code>
              <para>Creates a New-SGProviderYellowHammer and it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderYellowHammer -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -InquiryEndpoint inqEndpoint.com -InquiryEndpointUserName inqUser@inqDomain.com -InquiryEndpointPassword inqPass | Add-SGProvider</code>
              <para>Creates a New-SGProviderYellowHammer and uses the Inquiry parameters to override this endpoint then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.InquiryEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.InquiryEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.InquiryEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.CustomerEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.CustomerEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderYellowHammer.CustomerEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPassport">
            <summary>
            <para type="name">New-SGProviderPassport</para>
            <para type="synopsis">Creates a new Passport Provider object.</para>
            <para type="description">The New-SGProviderPassport creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderPassport, pipe an object or pipe an excel file or pass parameters to New-SGProviderPassport.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderPassport</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderPassport, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderPassport -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword | Add-SGProvider</code>
              <para>Creates a New-SGProviderPassport then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPassport.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPassport.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPassport.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPassport.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPassport.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPassport.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPassport.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPassport.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPPS">
            <summary>
            <para type="name">New-SGProviderPPS</para>
            <para type="synopsis">Creates a new PPS Provider object.</para>
            <para type="description">The New-SGProviderPPS creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderPPS, pipe an object or pipe an excel file or pass parameters to New-SGProviderPPS.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderPPS</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderPPS, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderPPS -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword | Add-SGProvider</code>
              <para>Creates a New-SGProviderPPS then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPPS.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPPS.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPPS.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPPS.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPPS.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPPS.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPPS.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPPS.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCPSRTP">
            <summary>
            <para type="name">New-SGProviderCPSRTP</para>
            <para type="synopsis">Creates a new CPSRTP Provider object.</para>
            <para type="description">The New-SGProviderCPSRTP creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderCPSRTP, pipe an object or pipe an excel file or pass parameters to New-SGProviderCPSRTP.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderCPSRTP</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderCPSRTP, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderCPSRTP -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword | Add-SGProvider</code>
              <para>Creates a New-SGProviderCPSRTP then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCPSRTP.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCPSRTP.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCPSRTP.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCPSRTP.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCPSRTP.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCPSRTP.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCPSRTP.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCPSRTP.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPSCU">
            <summary>
            <para type="name">New-SGProviderPSCU</para>
            <para type="synopsis">Creates a new PSCU Provider object.</para>
            <para type="description">The New-SGProviderPSCU creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderPSCU, pipe an object or pipe an excel file or pass parameters to New-SGProviderPSCU.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderPSCU</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderPSCU, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderPSCU -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -ClientId "12345" | Add-SGProvider</code>
              <para>Creates a New-SGProviderPSCU then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPSCU.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPSCU.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPSCU.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPSCU.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPSCU.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPSCU.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPSCU.ClientId">
            <summary>
            <para type="description">ClientId for the provider.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy">
            <summary>
            <para type="name">New-SGProviderSynergy</para>
            <para type="synopsis">Creates a new EnterpriseNotification Provider object.</para>
            <para type="description">The New-SGProviderSynergy creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderSynergy, pipe an object or pipe an excel file or pass parameters to New-SGProviderSynergy.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderSynergy</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderSynergy, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>$Synergy = New-SGProviderSynergy -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword
            Add-SGProvider -Provider $Synergy -Name Matthew -Environment PROD -ABA 123456788 -Verbose</code>
              <para>Creates a New-SGProviderSynergy and it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderSynergy -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -ImageEndpoint inqEndpoint.com -ImageEndpointUserName inqUser@inqDomain.com -ImageEndpointPassword inqPass | Add-SGProvider</code>
              <para>Creates a New-SGProviderSynergy and uses the Image parameters to override this endpoint then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.ImageEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.ImageEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.ImageEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.CustomerEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.CustomerEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.CustomerEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.InquiryEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.InquiryEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynergy.InquiryEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderODI">
            <summary>
            <para type="name">New-SGProviderODI</para>
            <para type="synopsis">Creates a new ODI Provider object.</para>
            <para type="description">The New-SGProviderODI creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderODI, pipe an object or pipe an excel file or pass parameters to New-SGProviderODI.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderODI</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderODI, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderODI -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderODI then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderODI.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderODI.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderODI.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderODI.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderODI.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderODI.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderODI.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderODI.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderODI.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCSPI">
            <summary>
            <para type="name">New-SGProviderCSPI</para>
            <para type="synopsis">Creates a new CSPI Provider object.</para>
            <para type="description">The New-SGProviderCSPI creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderCSPI, pipe an object or pipe an excel file or pass parameters to New-SGProviderCSPI.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderCSPI</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderCSPI, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderCSPI -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword | Add-SGProvider</code>
              <para>Creates a New-SGProviderCSPI then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCSPI.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCSPI.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCSPI.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCSPI.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCSPI.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCSPI.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCSPI.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCSPI.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseLogging">
            <summary>
            <para type="name">New-SGProviderEnterpriseLogging</para>
            <para type="synopsis">Creates a new EnterpriseLogging Provider object.</para>
            <para type="description">The New-SGProviderEnterpriseLogging creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderEnterpriseLogging, pipe an object or pipe an excel file or pass parameters to New-SGProviderEnterpriseLogging.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderEnterpriseLogging</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderEnterpriseLogging, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderEnterpriseLogging -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com -LogDestination Local | Add-SGProvider</code>
              <para>Creates a New-SGProviderEnterpriseLogging then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseLogging.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseLogging.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseLogging.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseLogging.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseLogging.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseLogging.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseLogging.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseLogging.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseLogging.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseLogging.LogDestination">
            <summary>
            <para type="description">Log Destination.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderAlertCenter">
            <summary>
            <para type="name">New-SGProviderAlertCenter</para>
            <para type="synopsis">Creates a new AlertCenter Provider object.</para>
            <para type="description">The New-SGProviderAlertCenter creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderAlertCenter, pipe an object or pipe an excel file or pass parameters to New-SGProviderAlertCenter.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderAlertCenter</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderAlertCenter, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderAlertCenter -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword | Add-SGProvider</code>
              <para>Creates a New-SGProviderAlertCenter then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderAlertCenter.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderAlertCenter.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderAlertCenter.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderAlertCenter.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderAlertCenter.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderAlertCenter.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderAlertCenter.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderAlertCenter.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderArgo">
            <summary>
            <para type="name">New-SGProviderArgo</para>
            <para type="synopsis">Creates a new Argo Provider object.</para>
            <para type="description">The New-SGProviderArgo creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderArgo, pipe an object or pipe an excel file or pass parameters to New-SGProviderArgo.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderArgo</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderArgo, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderArgo -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderArgo then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderArgo.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderArgo.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderArgo.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderArgo.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderArgo.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderArgo.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderArgo.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderArgo.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderArgo.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderItalk">
            <summary>
            <para type="name">New-SGProviderItalk</para>
            <para type="synopsis">Creates a new Italk Provider object.</para>
            <para type="description">The New-SGProviderItalk creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderItalk, pipe an object or pipe an excel file or pass parameters to New-SGProviderItalk.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderItalk</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderItalk, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderItalk -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderItalk then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderItalk.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderItalk.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderItalk.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderItalk.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderItalk.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderItalk.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderItalk.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderItalk.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderItalk.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderInternationalWires">
            <summary>
            <para type="name">New-SGProviderInternationalWires</para>
            <para type="synopsis">Creates a new InternationalWires Provider object.</para>
            <para type="description">The New-SGProviderInternationalWires creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderInternationalWires, pipe an object or pipe an excel file or pass parameters to New-SGProviderInternationalWires.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderInternationalWires</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderInternationalWires, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderInternationalWires -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderInternationalWires then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderInternationalWires.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderInternationalWires.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderInternationalWires.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderInternationalWires.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderInternationalWires.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderInternationalWires.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderInternationalWires.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderInternationalWires.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderInternationalWires.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderFedLineGlobal">
            <summary>
            <para type="name">New-SGProviderFedLineGlobal</para>
            <para type="synopsis">Creates a new FedLineGlobal Provider object.</para>
            <para type="description">The New-SGProviderFedLineGlobal creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderFedLineGlobal, pipe an object or pipe an excel file or pass parameters to New-SGProviderFedLineGlobal.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderFedLineGlobal</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderFedLineGlobal, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderFedLineGlobal -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderFedLineGlobal then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderFedLineGlobal.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderFedLineGlobal.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderFedLineGlobal.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderFedLineGlobal.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderFedLineGlobal.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderFedLineGlobal.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderFedLineGlobal.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderFedLineGlobal.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderFedLineGlobal.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA">
            <summary>
            <para type="name">New-SGProviderSymantecMFA</para>
            <para type="synopsis">Creates a new ServiceGateway SGProviderSymantecMFA Provider object.</para>
            <para type="description">The New-SGProviderSymantecMFA creates an object that can be filled out with all the values required for the provider.</para>
            <para type="description">To use New-SGProviderSymantecMFA, pipe an object or pipe an excel/csv file or pass parameters to New-SGProviderSymantecMFA.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderSymantecMFA | Add-SGProvider</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderSymantecMFA then send to Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderSymantecMFA -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint "ServerName.com" -Certificate "ims" -CertCacheExpirationTimeInMinutes 5 -ForcePin $false -JurisdictionId 123456789 -TemporaryPasswordExpireDays 1 | Add-SGProvider</code>
              <para>Pass parameters into New-SGProviderSymantecMFA then pipe to Add-SGProvider to add it to the system, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.ManagementServiceEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.ManagementServiceCert">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.QueryServiceEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.QueryServiceCert">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.AuthenticationServiceEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.AuthenticationServiceCert">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.Certificate">
            <summary>
            <para type="description">Certificate Name</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.CertCacheExpirationTimeInMinutes">
            <summary>
            <para type="description">Certificate Cache Expiration Time In Minutes</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.ForcePin">
            <summary>
            <para type="description">Force Pin</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.JurisdictionId">
            <summary>
            <para type="description">Jurisdiction Id</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSymantecMFA.TemporaryPasswordExpireDays">
            <summary>
            <para type="description">Certificate Cache Expiration Time In Minutes</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.GetSGProvider">
             <summary>
             <para type="name">Get-SGProvider</para>
             <para type="synopsis">Gets a provider(s) from an institution on a local or remote ServiceGateway server.</para>
             <para type="description">The Get-SGProvider cmdlet gives a list of provider(s) from an institution on a local server or on a remote server.</para>
             <para type="description">To use Get-SGProvider use the Name or ABA and Environment fields, or pipe an object or pipe an excel file to Get-SGProvider.</para>
             </summary>
             <para type="link">Get-SGInstitution</para>
             <para type="link">New-SGProviderSilverlake</para>
             <para type="link">New-SGProviderEnterpriseNotification</para>
             <para type="link">New-SGProviderMultiFactorAuth</para>
             <para type="link">New-JMCConnection</para>
             <para type="link">ConvertTo-Splat</para>
             <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
             <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
             <example>
               <code>PS C:\>$item = Get-SGProvider -ABA 82900319 -Environment TEST -ProviderTypeName pAdapter_Extension
            PS C:\>$item.Provider</code>
               <para>This returns the specified provider from the specified institution, -Verbose is optional...</para>
               <para>
               </para>
             </example>
             <example>
               <code>PS C:\>Get-SGInstitution | Out-GridView -PassThru | Get-SGProvider</code>
               <para>This returns the providers from a selected institution, -Verbose is optional...</para>
               <para>
               </para>
             </example>
             <example>
               <code>PS C:\>Get-SGProvider -Name "BankName"</code>
               <para>This returns the providers from a specified institution, -Verbose is optional...</para>
               <para>
               </para>
             </example>
             <example>
               <code>PS C:\>Get-SGProvider -ABA 123456788 -Environment PROD</code>
               <para>This returns the providers from a specified institution, -Verbose is optional...</para>
               <para>
               </para>
             </example>
             <example>
               <code>PS C:\>Get-SGInstitution | Get-SGProvider </code>
               <para>This returns all providers from all institutions, -Verbose is optional...</para>
               <para>
               </para>
             </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.GetSGProvider.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.GetSGProvider.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.GetSGProvider.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.GetSGProvider.ProviderTypeName">
            <summary>
            <para type="description">(Optional) Return specified Configured Provider data.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterExtension">
            <summary>
            <para type="name">New-SGProviderNetTeller</para>
            <para type="synopsis">Creates a new EnterpriseNotification Provider object.</para>
            <para type="description">The New-SGProviderNetTeller creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderNetTeller, pipe an object or pipe an excel file or pass parameters to New-SGProviderNetTeller. This cmdlet has many optional endpoint configurations.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderNetTeller</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderNetTeller, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderNetTeller -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint servername.com -AllEndpointUserName username@domain.com -AllEndpointPassword mypassword | Add-SGProvider</code>
              <para>Creates a New-SGProviderNetTeller and then | sends it to the Add-SGProvider to have it added to the institution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterExtension.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterExtension.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterExtension.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterExtension.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterExtension.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterExtension.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterExtension.ProviderHostName">
            <summary>
            <para type="description">ProviderHostName of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterExtension.ProviderPort">
            <summary>
            <para type="description">ProviderPort of the provider.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterWebService">
            <summary>
            <para type="name">New-SGProviderPadapterWebService</para>
            <para type="synopsis">Creates a new ServiceGateway pAdapter_WebService Provider object.</para>
            <para type="description">The New-SGProviderPadapterWebService creates an object that can be filled out with all the values required for the provider.</para>
            <para type="description">To use New-SGProviderPadapterWebService, pipe an object or pipe an excel/csv file or pass parameters to New-SGProviderPadapterWebService.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderPadapterWebService | Add-SGProvider</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderPadapterWebService then send to Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderPadapterWebService -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint servername.jhacorp.com -AllEndpointUserName username -AllEndpointPassword password | Add-SGProvider</code>
              <para>Pass parameters into New-SGProviderPadapterWebService then pipe to Add-SGProvider to add it to the system, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterWebService.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterWebService.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterWebService.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterWebService.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterWebService.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterWebService.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterWebService.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderPadapterWebService.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCoreDirector">
            <summary>
            <para type="name">New-SGProviderCoreDirector</para>
            <para type="synopsis">Creates a new CoreDirector Provider object.</para>
            <para type="description">The New-SGProviderCoreDirector creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderCoreDirector, pipe an object or pipe an excel file or pass parameters to New-SGProviderCoreDirector.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderCoreDirector</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderCoreDirector, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderCoreDirector -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderCoreDirector then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCoreDirector.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCoreDirector.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCoreDirector.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCoreDirector.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCoreDirector.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCoreDirector.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCoreDirector.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCoreDirector.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCoreDirector.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight">
            <summary>
            <para type="name">New-SGProvider4Sight</para>
            <para type="synopsis">Creates a new 4Sight Provider object.</para>
            <para type="description">The New-SGProvider4Sight creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProvider4Sight, pipe an object or pipe an excel file or pass parameters to New-SGProvider4Sight.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProvider4Sight</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProvider4Sight, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProvider4Sight -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com | Add-SGProvider</code>
              <para>Creates a New-SGProvider4Sight then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProvider4Sight -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com -InquiryEndpoint inqEndpoint.com -InquiryEndpointUserName inqUser@inqDomain.com -InquiryEndpointPassword inqPass -InquiryIssuer inqIssuer.com | Add-SGProvider</code>
              <para>Creates a New-SGProvider4Sight using the InquiryEndpoint override then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProvider4Sight -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com -ImageEndpoint imgEndpoint.com -ImageEndpointUserName imgUser@inqDomain.com -ImageEndpointPassword inqPass -ImageIssuer imgIssuer.com | Add-SGProvider</code>
              <para>Creates a New-SGProvider4Sight using the ImageEndpoint override then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.ImageEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.ImageEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.ImageEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.ImageIssuer">
            <summary>
            <para type="description">(Override) Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.InquiryEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.InquiryEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.InquiryEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.InquiryIssuer">
            <summary>
            <para type="description">(Override) Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.IdentityEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.IdentityEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.IdentityEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProvider4Sight.IdentityIssuer">
            <summary>
            <para type="description">(Override) Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys">
            <summary>
            <para type="name">New-SGProviderEpisys</para>
            <para type="synopsis">Creates a new EnterpriseNotification Provider object.</para>
            <para type="description">The New-SGProviderEpisys creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderEpisys, pipe an object or pipe an excel file or pass parameters to New-SGProviderEpisys.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderEpisys</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderEpisys, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>$Episys = New-SGProviderEpisys -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword
            Add-SGProvider -Provider $Episys -Name Matthew -Environment PROD -ABA 123456788 -Verbose</code>
              <para>Creates a New-SGProviderEpisys and it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderEpisys -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -InquiryEndpoint inqEndpoint.com -InquiryEndpointUserName inqUser@inqDomain.com -InquiryEndpointPassword inqPass | Add-SGProvider</code>
              <para>Creates a New-SGProviderEpisys and uses the Inquiry parameters to override this endpoint then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.InquiryEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.InquiryEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.InquiryEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.CustomerEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.CustomerEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.CustomerEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.TransactionEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.TransactionEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEpisys.TransactionEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys">
            <summary>
            <para type="name">New-SGProviderSynapsys</para>
            <para type="synopsis">Creates a new ServiceGateway pAdapter_WebService Provider object.</para>
            <para type="description">The New-SGProviderSynapsys creates an object that can be filled out with all the values required for the provider.</para>
            <para type="description">To use New-SGProviderSynapsys, pipe an object or pipe an excel/csv file or pass parameters to New-SGProviderSynapsys.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderSynapsys | Add-SGProvider</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderSynapsys then send to Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderSynapsys -Name Matthew -Environment PROD -ABA 123456788 -ProviderHostName 10.1.1.1 -ProviderPort 40001 -ProviderSecurityKey bob -ProviderInstitutionId 20 | Add-SGProvider</code>
              <para>Pass parameters into New-SGProviderSynapsys then pipe to Add-SGProvider to add it to the system, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.CustomerEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.CustomerEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.CustomerEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.InquiryEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.InquiryEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSynapsys.InquiryEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller">
            <summary>
            <para type="name">New-SGProviderNetTeller</para>
            <para type="synopsis">Creates a new ProviderNetTeller Provider object.</para>
            <para type="description">The New-SGProviderNetTeller creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderNetTeller, pipe an object or pipe an excel file or pass parameters to New-SGProviderNetTeller. This cmdlet has many optional endpoint configurations.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderNetTeller</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderNetTeller, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderNetTeller -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint servername.com -AllEndpointUserName username@domain.com -AllEndpointPassword mypassword | Add-SGProvider</code>
              <para>Creates a New-SGProviderNetTeller and then | sends it to the Add-SGProvider to have it added to the institution, -Verbose is optional...</para>
              <para>The rest of the parameters are used to deviate from the -All settings, eg, pass -ISS parameters to change that one endpoints values to something other than what was passed to -All</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.ISSEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.ISSEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.ISSEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.BSLEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.BSLEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.BSLEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.DefaultEndpoint">
            <summary>
            <para type="description">(Override) Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.DefaultEndpointUserName">
            <summary>
            <para type="description">(Override) Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderNetTeller.DefaultEndpointPassword">
            <summary>
            <para type="description">(Override) Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth">
            <summary>
            <para type="name">New-SGProviderMultiFactorAuth</para>
            <para type="synopsis">Creates a new EnterpriseNotification Provider object.</para>
            <para type="description">The New-SGProviderMultiFactorAuth creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderMultiFactorAuth, pipe an object or pipe an excel file or pass parameters to New-SGProviderMultiFactorAuth.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderMultiFactorAuth</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderMultiFactorAuth, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderMultiFactorAuth -Name Bob -Environment PROD -ABA 123456789 -ProviderName name -ProviderDescription desc -ProviderHostName b -CallerCredential b -CallerId b -InstanceId b -LegacyInstanceId b -LegacyCallerId b -LegacyCallerCredential b -CertFilePath b -GroupKey b -LicenseKey b -Target b -TargetBackup b -CertPassword b -NCPLogFile b | Add-SGProvider</code>
              <para>Creates a New-SGProviderMultiFactorAuth and then | sends it to the Add-SGProvider to have it added to the institution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.CallerCredential">
            <summary>
            <para type="description">CallerCredential of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.CallerId">
            <summary>
            <para type="description">CallerId of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.InstanceId">
            <summary>
            <para type="description">InstanceId of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.LegacyInstanceId">
            <summary>
            <para type="description">LegacyInstanceId of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.LegacyCallerId">
            <summary>
            <para type="description">LegacyCallerId of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.LegacyCallerCredential">
            <summary>
            <para type="description">LegacyCallerCredential of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.CertFilePath">
            <summary>
            <para type="description">CertFilePath of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.GroupKey">
            <summary>
            <para type="description">GroupKey of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.LicenseKey">
            <summary>
            <para type="description">LicenseKey of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.Target">
            <summary>
            <para type="description">Target of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.TargetBackup">
            <summary>
            <para type="description">TargetBackup of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.CertPassword">
            <summary>
            <para type="description">CertPassword of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderMultiFactorAuth.NCPLogFile">
            <summary>
            <para type="description">NCPLogFile of the provider.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020">
            <summary>
            <para type="name">New-SGProviderCIF2020</para>
            <para type="synopsis">Creates a new CIF2020 Provider object.</para>
            <para type="description">The New-SGProviderCIF2020 creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderCIF2020, pipe an object or pipe an excel file or pass parameters to New-SGProviderCIF2020.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderCIF2020</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderCIF2020, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderCIF2020 -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderCIF2020 then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderCIF2020 -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com -InquiryEndpoint inqEndpoint.com -InquiryEndpointUserName inqUser@inqDomain.com -InquiryEndpointPassword inqPass -InquiryIssuer inqIssuer.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderCIF2020 using the InquiryEndpoint overrride then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderCIF2020 -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com -ImageEndpoint imgEndpoint.com -ImageEndpointUserName imgUser@inqDomain.com -ImageEndpointPassword inqPass -ImageIssuer imgIssuer.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderCIF2020 using the InquiryEndpoint overrride then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020.ProviderHostName">
            <summary>
            <para type="description">Hostname of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020.ProviderPort">
            <summary>
            <para type="description">Port of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020.ProviderUseSSL">
            <summary>
            <para type="description">(Optional) UseSSL for the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020.ProviderSecurityKey">
            <summary>
            <para type="description">SecurityKey of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020.ProviderInstitutionId">
            <summary>
            <para type="description">InstitutionId of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderCIF2020.ProviderSocketHeader">
            <summary>
            <para type="description">(Optional) SocketHeader version of the provider.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.RemoveSGProvider">
            <summary>
            <para type="name">Remove-SGProvider</para>
            <para type="synopsis">Removes a specified provider from the selected institution on a local or remote ServiceGateway server.</para>
            <para type="description">The Remove-SGProvider cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            </summary>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-SGProvider</code>
              <para>This takes a xlsx file with named columns and pipe's them into Remove-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Remove-SGProvider -Name JS00000 -Environment PROD -ABA 123456788 -ProviderTypeName pAdapter_WebService -Force</code>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.RemoveSGProvider.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.RemoveSGProvider.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.RemoveSGProvider.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.RemoveSGProvider.Force">
            <summary>
            <para type="description">(Optional) toggle force to not be prompted yes or no to delete.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.RemoveSGProvider.Status">
            <summary>
            <para type="description">Status of the delete.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.RemoveSGProvider.ProviderTypeName">
            <summary>
            <para type="description">Provider Type Name of the provider. This is located in the JMC, in the institution, on the provider tab, in the 'Provider Type Name' column value is the one needed here.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseNotification">
            <summary>
            <para type="name">New-SGProviderEnterpriseNotification</para>
            <para type="synopsis">Creates a new EnterpriseNotification Provider object.</para>
            <para type="description">The New-SGProviderEnterpriseNotification creates an object that can be filled out with all the values required for the provider. Then Add-SGProvider must be used to add it to the SG institution.</para>
            <para type="description">To use New-SGProviderEnterpriseNotification, pipe an object or pipe an excel file or pass parameters to New-SGProviderEnterpriseNotification.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderEnterpriseNotification</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderEnterpriseNotification, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderEnterpriseNotification -Name Matthew -Environment PROD -ABA 123456788 -AllEndpoint Servername.com -AllEndpointUserName user@domain.com -AllEndpointPassword myPassword -AllEndpointIssuer servername.com | Add-SGProvider</code>
              <para>Creates a New-SGProviderEnterpriseNotification then | sends it to the Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseNotification.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseNotification.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseNotification.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseNotification.ProviderName">
            <summary>
            <para type="description">Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseNotification.ProviderDescription">
            <summary>
            <para type="description">Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseNotification.AllEndpoint">
            <summary>
            <para type="description">Hostname or full http:// endpoint address.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseNotification.AllEndpointIssuer">
            <summary>
            <para type="description">Issuer hostname or full http:// url for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseNotification.AllEndpointUserName">
            <summary>
            <para type="description">Username for the endpoint.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderEnterpriseNotification.AllEndpointPassword">
            <summary>
            <para type="description">Password for the endpoint.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake">
            <summary>
            <para type="name">New-SGProviderSilverlake</para>
            <para type="synopsis">Creates a new ServiceGateway Silverlake Provider object.</para>
            <para type="description">The New-SGProviderSilverlake creates an object that can be filled out with all the values required for the provider.</para>
            <para type="description">To use New-SGProviderSilverlake, pipe an object or pipe an excel/csv file or pass parameters to New-SGProviderSilverlake.</para>
            </summary>
            <para type="link">Add-SGProvider</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$myProviders = Import-Excel -Path .\inport-file.xlsx | New-SGProviderSilverlake | Add-SGProvider</code>
              <para>This takes a xslx file with named columns and pipe's them into New-SGProviderSilverlake then send to Add-SGProvider, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>New-SGProviderSilverlake -Name Matthew -Environment PROD -ABA 123456788 -ProviderHostName 10.1.1.1 -ProviderPort 40001 -ProviderSecurityKey bob -ProviderInstitutionId 20 | Add-SGProvider</code>
              <para>Pass parameters into New-SGProviderSilverlake then pipe to Add-SGProvider to add it to the system, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake.ProviderName">
            <summary>
            <para type="description">(Optional) Name of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake.ProviderDescription">
            <summary>
            <para type="description">(Optional) Description of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake.ProviderHostName">
            <summary>
            <para type="description">Hostname of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake.ProviderPort">
            <summary>
            <para type="description">Port of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake.ProviderSecurityKey">
            <summary>
            <para type="description">SecurityKey of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake.ProviderInstitutionId">
            <summary>
            <para type="description">InstitutionId of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake.ProviderUseSSL">
            <summary>
            <para type="description">(Optional) UseSSL of the provider.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.NewSGProviderSilverlake.ProviderSocketHeader">
            <summary>
            <para type="description">(Optional) SocketHeader of the provider.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Provider.AddSGProvider">
            <summary>
            <para type="name">Add-SGProvider</para>
            <para type="synopsis">Adds a provider to an institution on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-SGProvider cmdlet inserts providers into institutions on a local server or on a remote server.</para>
            <para type="description">To use Add-SGProvider, pipe an object or pipe an csv file or pass parameters to Add-SGProvider. Add-SGProvider requires the -Provider to be created via New-SGProvider* cmdlets.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-SGProviderSilverlake</para>
            <para type="link">New-SGProviderEnterpriseNotification</para>
            <para type="link">New-SGProviderMultiFactorAuth</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$mfaImport = import-csv -Path C:\temp\testexport.csv | New-SGProviderMultiFactorAuth
              Get-SGInstitution | Add-SGProvider -Provider $mfaImport</code>
              <para>This takes a csv file with named columns and pipe's them into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>$mfa = New-SGProviderMultiFactorAuth -Name bob -Environment PROD -ABA 012345678 -ProviderName name -ProviderDescription desc -ProviderHostName b -CallerCredential b -CallerId b -InstanceId b -LegacyInstanceId b -LegacyCallerId b -LegacyCallerCredential b -CertFilePath b -GroupKey b -LicenseKey b -Target b -TargetBackup b -CertPassword b -NCPLogFile b
              $mfa | Add-SGProvider</code>
              <para>This takes a csv file with named columns and pipe's them into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.AddSGProvider.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.AddSGProvider.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.AddSGProvider.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.AddSGProvider.Provider">
            <summary>
            <para type="description">Provider object from a New-SGProvider* cmdlet.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.AddSGProvider.ProviderTypeName">
            <summary>
            <para type="description">Provider Type Name of the provider. This is located in the JMC, in the institution, on the provider tab, in the 'Provider Type Name' column value is the one needed here.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Provider.AddSGProvider.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.SGUserCmdlet.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.SGUserCmdlet.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.SGUserCmdlet.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.SGUserCmdlet.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.User.RemoveSGUser">
            <summary>
            <para type="name">Remove-SGUser</para>
            <para type="synopsis">Removes a user from institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Remove-SGUser cmdlet removes users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Remove-SGInsitution, pipe an object or pipe an csv file or pass parameters to Remove-SGUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">Get-SGUser</para>
            <para type="link">Add-SGUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$institutions = Get-SGInstitution | Out-GridView -PassThru
              $institutions | Remove-SGUSer -UserName "user@domain.com" -Verbose</code>
              <para>This gets a selection of institutions and then Removes the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-SGUser</code>
              <para>This takes a csv file with named columns and pipe's them into Remove-SGUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.RemoveSGUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.ServiceGateway.User.RemoveSGUser.RemoveUser(PowerShellJMC.ServiceGateway.User.RemoveSGUser)">
            <summary>
            Removes the user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.User.AddSGHostedProviderUser">
            <summary>
            <para type="name">Add-SGHostedProviderUser</para>
            <para type="synopsis">Adds a user to hosted providers security tab on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-SGHostedProviderUser cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            </summary>
            <para type="link">New-JMCConnection</para>
            <para type="link">Add-SGUser</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-SGHostedProviderUser</code>
              <para>This takes a xlsx file with named columns and pipe's them into Add-SGHostedProviderUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.AddSGHostedProviderUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.AddSGHostedProviderUser.ProviderTypeName">
            <summary>
            <para type="description">ProviderTypeName of the Hosted Provider. e.g. iPay</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.AddSGHostedProviderUser.Operations">
            <summary>
            <para type="description">(Optional) Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.AddSGHostedProviderUser.OperationGroups">
            <summary>
            <para type="description">(Optional) Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.AddSGHostedProviderUser.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.ServiceGateway.User.AddSGHostedProviderUser.AddSgHostedUser(PowerShellJMC.ServiceGateway.User.AddSGHostedProviderUser)">
            <summary>
            Adds the sg hosted user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.User.GetSGUser">
            <summary>
            <para type="name">Get-SGUser</para>
            <para type="synopsis">Gets a user from the institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Get-SGUser cmdlet gets users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Get-SGUser, pipe an object or pipe an csv file or pass parameters to Get-SGUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$institutions = Get-SGInstitution | Out-GridView -PassThru
              $institutions | Get-SGUSer -Verbose</code>
              <para>This gets a selection of institutions and then Gets the users on the institution(s), -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-SGUser</code>
              <para>This takes a csv file with named columns and pipe's them into Get-SGUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-SGUser -Name MyBank -Environment PROD -ABA 123456789 -UserName user@domain.com</code>
              <para>Gets a specific user from a specified institution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.User.AddSGUser">
            <summary>
            <para type="name">Add-SGUser</para>
            <para type="synopsis">Adds a user to institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-SGUser cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGAddUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$institutions = Get-SGInstitution | Out-GridView -PassThru
              $institutions | Add-SGUSer -UserName "user@domain.com" -Operations MFAOOBValidate, MFAQnAPolInq, Ping -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-SGUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-SGUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.AddSGUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.AddSGUser.Operations">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.User.AddSGUser.OperationGroups">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.ServiceGateway.User.AddSGUser.AddUser(PowerShellJMC.ServiceGateway.User.AddSGUser)">
            <summary>
            Adds the user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Institution.UpdateSGInstitution">
            <summary>
            <para type="name">Update-SGInstitution</para>
            <para type="synopsis">Updates an institutions on a local or remote ServiceGateway server.</para>
            <para type="description">The Update-SGInstitution cmdlet updates institutions on a local server or on a remote server.</para>
            <para type="description">To use Update-SGInsitution, pipe an object or pipe an csv file or pass parameters to Update-SGInsitution.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Update-SGInstitution -Name TestingJMCPowerShell -Environment PROD -ABA 123456788 -Description "myBank, City - State" -City Monett -State MO -Country US</code>
              <para>Pass parameters into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.UpdateSGInstitution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.UpdateSGInstitution.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.UpdateSGInstitution.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.UpdateSGInstitution.Description">
            <summary>
            <para type="description">Description of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.UpdateSGInstitution.City">
            <summary>
            <para type="description">City of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.UpdateSGInstitution.State">
            <summary>
            <para type="description">State of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.UpdateSGInstitution.Country">
            <summary>
            <para type="description">Country of the Institution. E.g. {US | Can}</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.ServiceGateway.Institution.UpdateSGInstitution.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Institution.AddSGInstitution">
            <summary>
            <para type="name">Add-SGInstitution</para>
            <para type="synopsis">Adds institutions on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-SGInstitution cmdlet inserts institutions on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGInsitution.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Csv -Path .\inport-file.csv | Add-SGInsitution</code>
              <para>This takes a csv file with named columns and pipe's them into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-SGInsitution</code>
              <para>This takes a csv file with named columns and pipe's them into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Add-SGInstitution -Name TestingJMCPowerShell -Environment PROD -ABA 123456788 -Description "myBank, City - State" -City Monett -State MO -Country US</code>
              <para>Pass parameters into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.AddSGInstitution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.AddSGInstitution.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.AddSGInstitution.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.AddSGInstitution.Description">
            <summary>
            <para type="description">Description of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.AddSGInstitution.City">
            <summary>
            <para type="description">City of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.AddSGInstitution.State">
            <summary>
            <para type="description">State of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.AddSGInstitution.Country">
            <summary>
            <para type="description">Country of the Institution. E.g. {US | Can}</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.ServiceGateway.Institution.AddSGInstitution.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Institution.ImportSGInstitution">
            <summary>
            <para type="name">Import-SGInstitution</para>
            <para type="synopsis">Import institutions from a local or remote ServiceGateway server.</para>
            <para type="description">The Import-SGInstitution cmdlet Imports institutions from a local server or on a remote server.</para>
            <para type="description">To use Import-SGInsitution, pipe an object or pipe an excel file or pass parameters to Import-SGInsitution.</para>
            </summary>
            <para type="link">Import-SGInstitution</para>
            <para type="link">Get-SGInstitution</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>dir C:\Temp\testFolderExport\* | Out-GridView -PassThru | Import-SGInstitution -Password myPassword</code>
              <para>This takes a list of files with and pipe's them into Import-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Import-SGInsitution</code>
              <para>This takes a excel file with named columns of file names and pipe's them into Import-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.ImportSGInstitution.FullName">
            <summary>
            <para type="description">Pass in FullName for the import xml file. This maps from the FullName field from a DIR</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.ImportSGInstitution.Password">
            <summary>
            <para type="description">Password of the Institution import file.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.ImportSGInstitution.Status">
            <summary>
            <para type="description">Status of the import.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.ImportSGInstitution.StatusMessage">
            <summary>
            <para type="description">Status Message of the import.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Institution.ExportSGInstitution">
            <summary>
            <para type="name">Export-SGInstitution</para>
            <para type="synopsis">Export institutions from a local or remote ServiceGateway server.</para>
            <para type="description">The Export-SGInstitution cmdlet exports institutions from a local server or on a remote server.</para>
            <para type="description">To use Export-SGInsitution, pipe an object or pipe an excel file or pass parameters to Export-SGInsitution.</para>
            </summary>
            <para type="link">Import-SGInstitution</para>
            <para type="link">Get-SGInstitution</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Export-SGInstitution -Environment PROD -ABA 123456788 -Password myPassword -Path c:\temp\testFolderExport</code>
              <para>Pass parameters into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-SGInstitution | Export-SGInstitution -Password myPassword -Path c:\temp\testFolderExport</code>
              <para>This will export all the SG institutions and stick them in the temp folder, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-SGInstitution | Out-GridView -PassThru | Export-SGInstitution -Password myPassword -Path c:\temp\testFolderExport</code>
              <para>Using Out-Gridview -PassThru will allow the user to pick one or more FI's to export., -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.ExportSGInstitution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.ExportSGInstitution.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.ExportSGInstitution.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.ExportSGInstitution.Password">
            <summary>
            <para type="description">Password of the Institution Export File.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.ExportSGInstitution.Path">
            <summary>
            <para type="description">Path of the export file.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.ExportSGInstitution.Status">
            <summary>
            <para type="description">Status of the export.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Institution.RemoveSGInstitution">
            <summary>
            <para type="name">Remove-SGInstitution</para>
            <para type="synopsis">Remove institutions from a local or remote ServiceGateway server.</para>
            <para type="description">The Remove-SGInstitution cmdlet Removes institutions from a local server or on a remote server.</para>
            <para type="description">To use Remove-SGInsitution, pipe an object or pipe an excel file or pass parameters to Remove-SGInsitution.</para>
            </summary>
            <para type="link">Import-SGInstitution</para>
            <para type="link">Get-SGInstitution</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-SGInsitution</code>
              <para>This takes a csv file with named columns and pipe's them into Add-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Remove-SGInstitution -Name TestingJMCPowerShell -Environment PROD -ABA 123456788</code>
              <para>Pass parameters into Remove-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Remove-SGInstitution -Environment PROD -ABA 123456788</code>
              <para>Pass parameters into Remove-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Remove-SGInstitution -Name TestingJMCPowerShell</code>
              <para>Pass parameters into Remove-SGInsitution, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.RemoveSGInstitution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.RemoveSGInstitution.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.RemoveSGInstitution.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.RemoveSGInstitution.Force">
            <summary>
            <para type="description">(Optional) toggle force to not be prompted yes or no to delete.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.Institution.GetSGInstitution">
            <summary>
            <para type="name">Get-SGInstitution</para>
            <para type="synopsis">Gets institutions on a local or remote ServiceGateway server.</para>
            <para type="description">The Get-SGInstitution cmdlet inserts institutions on a local server or on a remote server.</para>
            <para type="description">To use Get-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGInsitution.</para>
            </summary>
            <para type="link">Add-SGInstitution</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">Export-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Export-Excel</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Get-SGInsitution</code>
              <para>This gets all the institutions in ServiceGateway.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-SGInsitution -Name "Bob"</code>
              <para>This gets a single institution in ServiceGateway with the Name Bob.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-SGInsitution -ABA 123456789 -Environment PROD</code>
              <para>This gets a single the institution in ServiceGateway with the specified ABA and env.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-SGInsitution -Name "Bob" -ABA 123456789 -Environment PROD</code>
              <para>This gets a single the institution in ServiceGateway with the specified ABA and Env.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-SGInsitution -ABA 123456789</code>
              <para>This gets all the institutions in ServiceGateway with the specified ABA and any Env.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-SGInsitution | Export-SGInstitution -Path C:\temp\Exported -Password Bob</code>
              <para>This pipes all the institutions to be exported.</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-SGInstitution | Out-GridView -PassThru | Export-SGInstitution -path "C:\temp\exported\" -Password Bob</code>
              <para>This sends all the intitutions to a selection grid and then sends those to the Export cmdlet, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-SGInstitution -FilterByProvider "iTalk"</code>
              <para>This gets all iTalk intitutions.</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.GetSGInstitution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.GetSGInstitution.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.GetSGInstitution.ABA">
            <summary>
            <para type="description">ABA of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.Institution.GetSGInstitution.FilterByProvider">
            <summary>
            <para type="description">(Optional) Returns institutions filtered by Provider. The ProviderTypeName is an alias of FilterByProvider.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.SetSGMessageResolution">
            <summary>
            <para type="name">Set-SGMessageResolution</para>
            <para type="synopsis">Sets institutions message resolution on a local or remote ServiceGateway server.</para>
            <para type="description">The Set-SGMessageResolution cmdlet sets the institution message resolution on a local server or on a remote server.</para>
            </summary>
            <para type="link">Get-SGMessageResolution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Export-Excel</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Set-SGMessageResolution -Environment PROD -ABA 123456789 -ProviderName Silverlake1 -MessageName UsrOperInq </code>
              <para>This sets a message resolution in ServiceGateway.</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.SetSGMessageResolution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.SetSGMessageResolution.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.SetSGMessageResolution.ABA">
            <summary>
            <para type="description">ABA of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.SetSGMessageResolution.MessageName">
            <summary>
            <para type="description">Message/Operation Name. From Get-SGMessageResolution</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.SetSGMessageResolution.ProviderName">
            <summary>
            <para type="description">Provider Name. From Get-SGMessageResolution</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.GetSGMessageResolution">
            <summary>
            <para type="name">Get-SGMessageResolution</para>
            <para type="synopsis">Gets institutions message resolution on a local or remote ServiceGateway server.</para>
            <para type="description">The Get-SGMessageResolution cmdlet gets institution message resolution on a local server or on a remote server.</para>
            </summary>
            <para type="link">Set-SGMessageResolution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Export-Excel</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Get-SGMessageResolution -ABA 123456789 -Environment PROD</code>
              <para>This gets all the existing messages that are set in ServiceGateway.</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.GetSGMessageResolution.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.GetSGMessageResolution.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.GetSGMessageResolution.ABA">
            <summary>
            <para type="description">ABA of the Institution.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.GetSGMetadataHistory">
            <summary>
            <para type="name">Get-SGMetadataHistory</para>
            <para type="synopsis">Outputs ServiceGateway Metadata import history from a local or remote ServiceGateway server.</para>
            <para type="description">The Get-SGMetadataHistory cmdlet outputs ServiceGateway Metadata import history from a local or remote ServiceGateway server.</para>
            </summary>
            <para type="link">New-JMCConnection</para>
            <example>
              <code>PS C:\>Import-SGMetadata -Path .\metadata7.2.2.zip</code>
              <para>This takes a metadata zip file and imports that file into ServiceGateway, -Verbose is optional...</para>n
            </example>
            <example>
              <code>PS C:\>Import-SGMetadata -Path .\metadata7.2.2.zip -ShowProgress</code>
              <para>This takes a metadata zip file and imports that file into ServiceGateway and -ShowProgress will give you a progress bar, -Verbose is optional...</para>n
            </example>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.UpdateSGClientWSHttpsBinding">
            <summary>
            <para type="name">Update-SGClientWSHttpsBinding</para>
            <para type="synopsis">Updates the ClientWSHttpsBinding in the SG Manage Provider Bindings page.</para>
            <para type="description">The Update-SGClientWSHttpsBinding cmdlet Updates the bindings.</para>
            </summary>
            <example>
              <code>PS C:\>Update-SGClientWSHttpsBinding</code>
              <para>This will use default values for MTOM, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Update-SGClientWSHttpsBinding -MaxSize 3276800 -MaxReader 1048576 -Timeout 60</code>
              <para>Be sure to pass in values that need to be updated, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.UpdateSGClientWSHttpsBinding.MaxSize">
            <summary>
            <para type="description">Updates the Max Received Message Size and Max Buffer Pool Size.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.UpdateSGClientWSHttpsBinding.MaxReader">
            <summary>
            <para type="description">Updates the Max Name Table Char Count and Max String Content Length.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.UpdateSGClientWSHttpsBinding.Timeout">
            <summary>
            <para type="description">Updates the Open, Closed, Send and Receive Timeouts in seconds.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ServiceGateway.ImportSGMetadata">
            <summary>
            <para type="name">Import-SGMetadata</para>
            <para type="synopsis">Imports ServiceGateway Metadata into a local or remote ServiceGateway server.</para>
            <para type="description">The Import-SGMetadata cmdlet upgrades the metadata into the ServiceGateway feature on a local server or on a remote server.</para>
            </summary>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <example>
              <code>PS C:\>Import-SGMetadata -Path .\metadata7.2.2.zip</code>
              <para>This takes a metadata zip file and imports that file into ServiceGateway, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-SGMetadata -Path .\metadata7.2.2.zip -ShowProgress</code>
              <para>This takes a metadata zip file and imports that file into ServiceGateway and -ShowProgress will give you a progress bar, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.ImportSGMetadata.Path">
            <summary>
            <para type="description">Path of the Metadata zip file.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.ImportSGMetadata.ShowProgress">
            <summary>
            <para type="description">Shows the user a progress bar and more info.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.ServiceGateway.ImportSGMetadata.Status">
            <summary>
            <para type="description">Status of the import.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.ServiceGateway.ImportSGMetadata.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.EEInstitution">
            <summary>
            <para type="name">EEInstitution</para>
            <para type="synopsis">EEInstitution is an object that represents a Enterprise Event Insiutition.</para>
            <para type="description">EEInstitution is an object that represents a Enterprise Event Insiutition.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.EEUser">
            <summary>
            <para type="name">EEUser</para>
            <para type="synopsis">EEUser is an object that represents a EnterpriseEvent User that is added to the security tab.</para>
            <para type="description">EEUser is an object that represents a EnterpriseEvent User.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.PSUser">
            <summary>
            <para type="name">PSUser</para>
            <para type="synopsis">PSUser is an object that represents a Persistent Storage User that is added to the security tab.</para>
            <para type="description">PSUser is an object that represents a Persistent Storage User.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.IMSUser">
            <summary>
            <para type="name">IMSUser</para>
            <para type="synopsis">IMSUser is an object that represents a Identity Management System User that is added to the security tab.</para>
            <para type="description">IMSUser is an object that represents a Identity Management System User.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.ELUser">
            <summary>
            <para type="name">ELUser</para>
            <para type="synopsis">ELUser is an object that represents a Enterprise Logging User that is added to the security tab.</para>
            <para type="description">ELUser is an object that represents a Enterprise Logging User.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.EAUser">
            <summary>
            <para type="name">EAUser</para>
            <para type="synopsis">EAUser is an object that represents a Enterprise Audit User that is added to the security tab.</para>
            <para type="description">EAUser is an object that represents a Enterprise Audit User.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.BEUser">
            <summary>
            <para type="name">BEUser</para>
            <para type="synopsis">BEUser is an object that represents a Broadcast Event User that is added to the security tab.</para>
            <para type="description">BEUser is an object that represents a Broadcast Event User.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.DLIInstitution">
            <summary>
            <para type="name">DLIInstitution</para>
            <para type="synopsis">DLIInstitution is an object that represents a DLI Insiutition.</para>
            <para type="description">DLIInstitution is an object that represents a DLI Insiutition.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.DLWSubscriber">
            <summary>
            <para type="name">DLWSubscriber</para>
            <para type="synopsis">Parameters for DLWSubscriber cmdlets.</para>
            <para type="description">The Get-DLWSubscriber uses this object.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.DLWLogicalTerminal">
            <summary>
            <para type="name">DLWLogicalTerminal</para>
            <para type="synopsis">Parameters for DLWLogicalTerminal cmdlets.</para>
            <para type="description">The Get-DLWLogicalTerminal uses this object.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.DLWSubscriberUser">
            <summary>
            <para type="name">DLWSubscriberUser</para>
            <para type="synopsis">Parameters for DLWSubscriberUser cmdlets.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.JMCFarmConfig">
            <summary>
            <para type="name">JMCFarmConfig</para>
            <para type="synopsis">JMCFarmConfig is an object that represents a ServiceGateway farm config that is added to the security tab.</para>
            <para type="description">SGUser is an object that represents a ServiceGateway farm configuration.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.SGHostedProviderUser">
            <summary>
            <para type="name">SGHostedProviderUser</para>
            <para type="synopsis">SGHostedProviderUser is an object that represents a ServiceGateway Hosted Provider User that is added to the security tab.</para>
            <para type="description">SGHostedProviderUser is an object that represents a ServiceGateway Hosted Provider User.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.CustomClaimType">
            <summary>
            <para type="name">CustomClaimType</para>
            <para type="synopsis">CustomClaimType is an object that represents a IdentityManagement Custom Claim Type.</para>
            <para type="description">CustomClaimType is an object that represents a IdentityManagement Custom Claim Type.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.IMSCustomClaim">
            <summary>
            <para type="name">IMSCustomClaim</para>
            <para type="synopsis">IMSCustomClaim is an object that represents a IdentityManagement Custom Claim.</para>
            <para type="description">IMSCustomClaim is an object that represents a IdentityManagement Custom Claim.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.SGInstitution">
            <summary>
            <para type="name">SGInstitution</para>
            <para type="synopsis">SGInstitution is an object that represents a ServiceGateway Insiutition.</para>
            <para type="description">SGInstitution is an object that represents a ServiceGateway Insiutition.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.SGProvider">
            <summary>
            <para type="name">SGProvider</para>
            <para type="synopsis">SGProvider is an object that represents a ServiceGateway Provider.</para>
            <para type="description">SGProvider is an object that represents a ServiceGateway Provider.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.SGProviderPadapterExtension">
            <summary>
            <para type="name">SGProviderPadapterExtension</para>
            <para type="synopsis">SGProviderPadapterExtension is an object that represents a ServiceGateway pAdapter Provider.</para>
            <para type="description">SGProviderPadapterExtension is an object that represents a ServiceGateway pAdapter Provider.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.SGUser">
            <summary>
            <para type="name">SGUser</para>
            <para type="synopsis">SGUser is an object that represents a ServiceGateway User that is added to the security tab.</para>
            <para type="description">SGUser is an object that represents a ServiceGateway User.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.Types.ADFSFederationMetadataInfo">
            <summary>
            <para type="name">ADFSFederationMetadataInfo</para>
            <para type="synopsis">ADFSFederationMetadataInfo is an object that represents the ADFS Federated Metadata.</para>
            <para type="description">ADFSFederationMetadataInfo is an object that represents the ADFS Federated Metadata.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.PersistentStorage.GetPSUser">
            <summary>
            <para type="name">Get-PSUser</para>
            <para type="synopsis">Gets a user security on a local or remote Persistent Storage server.</para>
            <para type="description">The Get-BEUser cmdlet gets users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Get-PSUser, pipe an object or pipe an csv file or pass parameters to Get-PSUser.</para>
            </summary>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-PSUser</code>
              <para>This takes a csv file with named columns and pipe's them into Get-PSUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-PSUser -UserName user@domain.com</code>
              <para>Gets a specific user from a specified institution, -Verbose is optional...</para>
              <para>
              </para>
            </example>    
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.GetPSUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.PersistentStorage.RemovePSUser">
            <summary>
            <para type="name">Remove-PSUser</para>
            <para type="synopsis">Removes a user from a local or remote Persistent Storage server.</para>
            <para type="description">The Remove-PSUser cmdlet removes users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Remove-PSUser, pipe an object or pipe an csv file or pass parameters to Remove-PSUser.</para>
            </summary>
            <para type="link">Get-PSUser</para>
            <para type="link">Add-PSUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-PSUser</code>
              <para>This takes a csv file with named columns and pipe's them into Remove-PSUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.RemovePSUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.PersistentStorage.RemovePSUser.RemoveUser(PowerShellJMC.PersistentStorage.RemovePSUser)">
            <summary>
            Removes the user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry">
            <summary>
            <para type="name">Update-PSStorageEntry</para>
            <para type="synopsis">Updates an entry to persistent storage on a local or remote persistent storage server.</para>
            <para type="description">The Update-PSStorageEntry cmdlet Updates entries to the persistent storage on a local server or on a remote server.</para>
            <para type="description">To use Update-PSStorageEntry, pipe an object or pipe an csv file or pass parameters to Update-PSStorageEntry.</para>
            </summary>
            <para type="link">Add-PSStorageEntry</para>
            <para type="link">Remove-PSStorageEntry</para>
            <para type="link">Get-PSStorageEntry</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Get-PSStorageEntry -UserId updateMe@jhacorp.com | Update-PSStorageEntry -UserId updateMe@newDomain.com</code>
              <para>Updates an entry for a specific record(s)/user(s) from persistent storage, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.InputObject">
            <summary>
            <para type="description">Get-PSStorageEntry item</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.UserId">
            <summary>
            <para type="description">UserName of the user for the persistent storage entry.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.FinancialInstitution">
            <summary>
            <para type="description">Name of the Institution or aba.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.InstRtId">
            <summary>
            <para type="description">Aba.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.ApplicationKey">
            <summary>
            <para type="description">Application Key.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.ConsumerProduct">
            <summary>
            <para type="description">Consumer Product.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.ConsumerProductApplication">
            <summary>
            <para type="description">Consumer Product.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.Contents">
            <summary>
            <para type="description">Contents.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.ContentType">
            <summary>
            <para type="description">Content Type.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.ConsumerEnvironment">
            <summary>
            <para type="description">Customer Environment.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.Expires">
            <summary>
            <para type="description">Expires.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.UpdatePSStorageEntry.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.PersistentStorage.RemovePSStorageEntry">
             <summary>
             <para type="name">Remove-PSStorageEntry</para>
             <para type="synopsis">Removes an entry from the PS on a local or remote persistent storage server.</para>
             <para type="description">The Remove-PSStorageEntry cmdlet Removes entry from the persistent storage security on a local server or on a remote server.</para>
             <para type="description">To use Remove-PSStorageEntry, pipe an object or pipe an csv file or pass parameters to Remove-PSStorageEntry.</para>
             </summary>
             <para type="link">Remove-PSStorageEntry</para>
             <para type="link">Remove-PSStorageEntry</para>
             <para type="link">ConvertTo-Splat</para>
             <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
             <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
             <example>
               <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-PSStorageEntry</code>
               <para>This takes a csv file with named columns and pipe's them into Remove-PSStorageEntry, -Verbose is optional...</para>
               <para>
               </para>
             </example>
             <example>
               <code>PS C:\>$item = Get-PSStorageEntry -UserId removeMe@jhacorp.com
            Remove-PSStorageEntry -InputObject $item</code>
               <para>Removes an entry for a specific user from a specified institution, -Verbose is optional...</para>
               <para>
               </para>
             </example>    
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.RemovePSStorageEntry.InputObject">
            <summary>
            <para type="description">Get-PSStorageEntry item</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.RemovePSStorageEntry.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.PersistentStorage.AddPSStorageEntry">
            <summary>
            <para type="name">Add-PSStorageEntry</para>
            <para type="synopsis">Adds an entry to persistent storage on a local or remote persistent storage server.</para>
            <para type="description">The Add-PSStorageEntry cmdlet Adds entries to the persistent storage on a local server or on a remote server.</para>
            <para type="description">To use Add-PSStorageEntry, pipe an object or pipe an csv file or pass parameters to Add-PSStorageEntry.</para>
            </summary>
            <para type="link">Add-PSStorageEntry</para>
            <para type="link">Remove-PSStorageEntry</para>
            <para type="link">Update-PSStorageEntry</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-PSStorageEntry</code>
              <para>This takes a csv file with named columns and pipe's them into Add-PSStorageEntry, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Add-PSStorageEntry -UserId bob -FinancialInstitution 1 -InstRtId 1 -SecurityKey bobkey -ApplicationKey 1 -ConsumerProduct sl -ConsumerProductApplication PoshJmc -Contents bob -ContentType Text -ConsumerEnvironment PROD</code>
              <para>Adds an entry for a specific user from a specified institution, -Verbose is optional...</para>
              <para>
              </para>
            </example>    
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.UserId">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.FinancialInstitution">
            <summary>
            <para type="description">Name of the Institution or aba.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.InstRtId">
            <summary>
            <para type="description">Aba.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.SecurityKey">
            <summary>
            <para type="description">Security Key.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.ApplicationKey">
            <summary>
            <para type="description">Application Key.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.ConsumerProduct">
            <summary>
            <para type="description">Consumer Product.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.ConsumerProductApplication">
            <summary>
            <para type="description">Consumer Product.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.Contents">
            <summary>
            <para type="description">Contents.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.ContentType">
            <summary>
            <para type="description">Content Type.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.ConsumerEnvironment">
            <summary>
            <para type="description">Customer Environment.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.Expires">
            <summary>
            <para type="description">Expires.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSStorageEntry.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.PersistentStorage.GetPSStorageEntry">
            <summary>
            <para type="name">Get-PSStorageEntry</para>
            <para type="synopsis">Gets an entry from the persistent storage on a local or remote ServiceGateway server.</para>
            <para type="description">The Get-PSStorageEntry cmdlet gets entries from the persistent storage on a local server or on a remote server.</para>
            <para type="description">To use Get-PSStorageEntry, pipe an object or pipe an csv file or pass parameters to Get-PSStorageEntry.</para>
            </summary>
            <para type="link">Add-PSStorageEntry</para>
            <para type="link">Remove-PSStorageEntry</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>$institutions = Get-SGInstitution | Out-GridView -PassThru
              $institutions | Get-PSStorageEntry -Verbose</code>
              <para>This gets a selection of institutions and then Gets the users on the institution(s), -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-PSStorageEntry</code>
              <para>This takes a csv file with named columns and pipe's them into Get-PSStorageEntry, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-PSStorageEntry -UserId me@myDomain.com -FinancialInstitution 123456789</code>
              <para>Gets entries for a specific user from a specified institution, -Verbose is optional...</para>
              <para>
              </para>
            </example>    
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.GetPSStorageEntry.UserId">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.GetPSStorageEntry.FinancialInstitution">
            <summary>
            <para type="description">Name of the Institution or aba.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.GetPSStorageEntry.ApplicationKey">
            <summary>
            <para type="description">Application Key.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.GetPSStorageEntry.ConsumerProduct">
            <summary>
            <para type="description">Consumer Product.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.GetPSStorageEntry.InstRtId">
            <summary>
            <para type="description">Aba.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.GetPSStorageEntry.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.PersistentStorage.AddPSUser">
            <summary>
            <para type="name">Add-PSUser</para>
            <para type="synopsis">Adds a user to institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-PSUser cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGAddUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-PSUser -UserName "user@domain.com" -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Add-PSUser -UserName "user@domain.com" -Operations MFAOOBValidate, MFAQnAPolInq, Ping -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-PSUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-PSUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSUser.Operations">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.PersistentStorage.AddPSUser.OperationGroups">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.PersistentStorage.AddPSUser.AddUser(PowerShellJMC.PersistentStorage.AddPSUser)">
            <summary>
            Adds the BE user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.IdentityManagement.GetIMSUser">
            <summary>
            <para type="name">Get-IMSUser</para>
            <para type="synopsis">Gets a user security on a local or remote Identity Management Server server.</para>
            <para type="description">The Get-IMSUser cmdlet gets users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Get-IMSUser, pipe an object or pipe an csv file or pass parameters to Get-IMSUser.</para>
            </summary>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-IMSUser</code>
              <para>This takes a csv file with named columns and pipe's them into Get-IMSUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-IMSUser -UserName user@domain.com</code>
              <para>Gets a specific user from a specified institution, -Verbose is optional...</para>
              <para>
              </para>
            </example>    
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.GetIMSUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.IdentityManagement.RemoveIMSUser">
            <summary>
            <para type="name">Remove-IMSUser</para>
            <para type="synopsis">Removes a user from a local or remote Identity Management System server.</para>
            <para type="description">The Remove-IMSUser cmdlet removes users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Remove-BEUser, pipe an object or pipe an csv file or pass parameters to Remove-IMSUser.</para>
            </summary>
            <para type="link">Get-IMSUser</para>
            <para type="link">Add-IMSUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-IMSUser</code>
              <para>This takes a csv file with named columns and pipe's them into Remove-BEUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.RemoveIMSUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.RemoveIMSUser.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.IdentityManagement.RemoveIMSUser.RemoveUser(PowerShellJMC.IdentityManagement.RemoveIMSUser)">
            <summary>
            Removes the user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.IdentityManagement.AddIMSUser">
            <summary>
            <para type="name">Add-IMSUser</para>
            <para type="synopsis">Adds a user to institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-IMSUser cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGAddUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-IMSUser -UserName "user@domain.com" -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Add-IMSUser -UserName "user@domain.com" -Operations MFAOOBValidate, MFAQnAPolInq, Ping -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-IMSUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-IMSUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.AddIMSUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.AddIMSUser.Operations">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.AddIMSUser.OperationGroups">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.IdentityManagement.AddIMSUser.AddUser(PowerShellJMC.IdentityManagement.AddIMSUser)">
            <summary>
            Adds the IMS user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.IdentityManagement.GetIMSCustomClaim">
            <summary>
            <para type="name">Get-IMSCustomClaim</para>
            <para type="synopsis">Gets a custom claim on a local or remote ServiceGateway server.</para>
            <para type="description">The Get-IMSCustomClaim cmdlet inserts a custom claim on a local server or on a remote server. IF the user does not exist it will Get it automatically.</para>
            </summary>
            <para type="link">New-JMCConnection</para>
            <para type="link">Get-SGUser</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Get-IMSCustomClaim -FilterByUserName "user@domain.com"</code>
              <para>This gets the custom claim and if the user does not exist it will create it, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-IMSCustomClaim</code>
              <para>This gets the custom claim and if the user does not exist it will create it, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-IMSCustomClaim</code>
              <para>This takes a xlsx file with named columns and pipe's them into Get-IMSCustomClaim, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.GetIMSCustomClaim.FilterByUserName">
            <summary>
            <para type="description">(Optional) Filtered by UserName of the user for the IMS Accounts to be returned.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.GetIMSCustomClaim.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.IdentityManagement.GetIMSCustomClaim.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="T:PowerShellJMC.IdentityManagement.AddIMSCustomClaim">
            <summary>
            <para type="name">Add-IMSCustomClaim</para>
            <para type="synopsis">Adds a custom claim on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-IMSCustomClaim cmdlet inserts a custom claim on a local server or on a remote server. IF the user does not exist it will add it automatically.</para>
            </summary>
            <para type="link">New-JMCConnection</para>
            <para type="link">Add-SGUser</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-IMSCustomClaim -UserName "user@domain.com" -Type Role -Value "Bob"</code>
              <para>This creates the custom claim and if the user does not exist it will create it, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-IMSCustomClaim</code>
              <para>This takes a xlsx file with named columns and pipe's them into Add-IMSCustomClaim, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.AddIMSCustomClaim.UserName">
            <summary>
            <para type="description">UserName of the user for the IMS Accounts to be added.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.AddIMSCustomClaim.Type">
            <summary>
            <para type="description">Type of Custom Claim.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.AddIMSCustomClaim.Value">
            <summary>
            <para type="description">Value of Custom Claim.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.AddIMSCustomClaim.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.IdentityManagement.AddIMSCustomClaim.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="T:PowerShellJMC.IdentityManagement.GetIMSAdfsCert">
            <summary>
            <para type="name">Set-IMSAdfsCert</para>
            <para type="synopsis">Sets the RP Cert in the IMS Federated Metadata db.</para>
            <para type="description">The Set-IMSAdfsCert cmdlet inserts a record in the IMS database for the remote ADFS farm RP. This cmdlet can be used many times on the same identifier and it will not duplicate records in the db.</para>
            </summary>
            <example>
              <code>PS C:\>Set-IMSAdfsCert -Path C:\temp\my-RP-whatever.cer -IMSDataSource "JXSQL1\JXCHANGE" -ADFSiisFQDN serverName.jha-sys.com -relyingPartyIdentifier http://jackhenry.com/application/jxchange/ims</code>
              <para>Be sure to pass in all the parm values, they are all required, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.GetIMSAdfsCert.IMSDataSource">
            <summary>
            <para type="description">IMS  Data Source in 'SERVER\Instance' format.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.GetIMSAdfsCert.RelyingPartyIdentifier">
            <summary>
            <para type="description">ADFS Relying Party Identifier. e.g. 'http://jackhenry.com/application/jxchange/ims'</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.GetIMSAdfsCert.OverrideDefaultSQLConnectionString">
            <summary>
            <para type="description">Overrides the default connection string. Default is: 'data source={0};initial catalog=IdentityManagement;Integrated Security=SSPI;Application Name=jXADFS2ClaimsProviderTrust'</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.IdentityManagement.SetIMSAdfsCert">
            <summary>
            <para type="name">Set-IMSAdfsCert</para>
            <para type="synopsis">Sets the RP Cert in the IMS Federated Metadata db.</para>
            <para type="description">The Set-IMSAdfsCert cmdlet inserts a record in the IMS database for the remote ADFS farm RP. This cmdlet can be used many times on the same identifier and it will not duplicate records in the db.</para>
            </summary>
            <example>
              <code>PS C:\>Set-IMSAdfsCert -Path C:\temp\my-RP-whatever.cer -IMSDataSource "JXSQL1\JXCHANGE" -ADFSiisFQDN serverName.jha-sys.com -relyingPartyIdentifier http://jackhenry.com/application/jxchange/ims</code>
              <para>Be sure to pass in all the parm values, they are all required, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.SetIMSAdfsCert.Path">
            <summary>
            <para type="description">Path of the rp.cer file.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.SetIMSAdfsCert.IMSDataSource">
            <summary>
            <para type="description">IMS  Data Source in 'SERVER\Instance' format.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.SetIMSAdfsCert.ADFSiisFQDN">
            <summary>
            <para type="description">ADFS iis FQDN for the remote ADFS Farm.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.SetIMSAdfsCert.RelyingPartyIdentifier">
            <summary>
            <para type="description">ADFS Relying Party Identifier. e.g. 'http://jackhenry.com/application/jxchange/ims'</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.IdentityManagement.SetIMSAdfsCert.OverrideDefaultSQLConnectionString">
            <summary>
            <para type="description">Overrides the default connection string. Default is: 'data source={0};initial catalog=IdentityManagement;Integrated Security=SSPI;Application Name=jXADFS2ClaimsProviderTrust'</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseLogging.GetELUser">
            <summary>
            <para type="name">Get-ELUser</para>
            <para type="synopsis">Gets a user security on a local or remote Enterprise Logging server.</para>
            <para type="description">The Get-ELUser cmdlet gets users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Get-ELUser, pipe an object or pipe an csv file or pass parameters to Get-ELUser.</para>
            </summary>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-ELUser</code>
              <para>This takes a csv file with named columns and pipe's them into Get-ELUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-ELUser -UserName user@domain.com</code>
              <para>Gets a specific user from a specified institution, -Verbose is optional...</para>
              <para>
              </para>
            </example>    
        </member>
        <member name="P:PowerShellJMC.EnterpriseLogging.GetELUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.EnterpriseLogging.RemoveELUser">
            <summary>
            <para type="name">Remove-ELUser</para>
            <para type="synopsis">Removes a user from a local or remote Enterprise Logging server.</para>
            <para type="description">The Remove-ELUser cmdlet removes users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Remove-ELUser, pipe an object or pipe an csv file or pass parameters to Remove-ELUser.</para>
            </summary>
            <para type="link">Get-ELUser</para>
            <para type="link">Add-ELUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-ELUser</code>
              <para>This takes a csv file with named columns and pipe's them into Remove-BEUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseLogging.RemoveELUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.EnterpriseLogging.RemoveELUser.RemoveUser(PowerShellJMC.EnterpriseLogging.RemoveELUser)">
            <summary>
            Removes the user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.EnterpriseLogging.AddELUser">
            <summary>
            <para type="name">Add-ELUser</para>
            <para type="synopsis">Adds a user to institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-ELUser cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGAddUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-ELUser -UserName "user@domain.com" -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Add-ELUser -UserName "user@domain.com" -Operations MFAOOBValidate, MFAQnAPolInq, Ping -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-ELUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-ELUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.EnterpriseLogging.AddELUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseLogging.AddELUser.Operations">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.EnterpriseLogging.AddELUser.OperationGroups">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.EnterpriseLogging.AddELUser.AddUser(PowerShellJMC.EnterpriseLogging.AddELUser)">
            <summary>
            Adds the EL user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.BroadcastEvent.GetBEUser">
            <summary>
            <para type="name">Get-BEUser</para>
            <para type="synopsis">Gets a user security on a local or remote Broadcast Event server.</para>
            <para type="description">The Get-BEUser cmdlet gets users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Get-BEUser, pipe an object or pipe an csv file or pass parameters to Get-SGUser.</para>
            </summary>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-BEUser</code>
              <para>This takes a csv file with named columns and pipe's them into Get-BEUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-BEUser -UserName user@domain.com</code>
              <para>Gets a specific user from a specified institution, -Verbose is optional...</para>
              <para>
              </para>
            </example>    
        </member>
        <member name="P:PowerShellJMC.BroadcastEvent.GetBEUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.BroadcastEvent.GetBEUser.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.BroadcastEvent.RemoveBEUser">
            <summary>
            <para type="name">Remove-BEUser</para>
            <para type="synopsis">Removes a user from a local or remote Broadcast Event server.</para>
            <para type="description">The Remove-BEUser cmdlet removes users from the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Remove-BEUser, pipe an object or pipe an csv file or pass parameters to Remove-BEUser.</para>
            </summary>
            <para type="link">Get-BEUser</para>
            <para type="link">Add-BEUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-BEUser</code>
              <para>This takes a csv file with named columns and pipe's them into Remove-BEUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.BroadcastEvent.RemoveBEUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.BroadcastEvent.RemoveBEUser.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.BroadcastEvent.RemoveBEUser.RemoveUser(PowerShellJMC.BroadcastEvent.RemoveBEUser)">
            <summary>
            Removes the user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.BroadcastEvent.AddBEUser">
            <summary>
            <para type="name">Add-BEUser</para>
            <para type="synopsis">Adds a user to institutions security on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-BEUser cmdlet inserts users into the institutions security on a local server or on a remote server.</para>
            <para type="description">To use Add-SGInsitution, pipe an object or pipe an csv file or pass parameters to Add-SGAddUser.</para>
            </summary>
            <para type="link">Get-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-BEUser -UserName "user@domain.com" -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Add-BEUser -UserName "user@domain.com" -Operations Ping -Verbose</code>
              <para>This gets a selection of institutions and then adds the user and selected operations to the institution(s) selected, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-BEUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-BEUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.BroadcastEvent.AddBEUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.BroadcastEvent.AddBEUser.Operations">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.BroadcastEvent.AddBEUser.OperationGroups">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.BroadcastEvent.AddBEUser.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="M:PowerShellJMC.BroadcastEvent.AddBEUser.AddUser(PowerShellJMC.BroadcastEvent.AddBEUser)">
            <summary>
            Adds the BE user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.UpdateJMCFarm">
            <summary>
            <para type="name">Update-JMCFarm</para>
            <para type="synopsis">Updates a farm to the jxchange server.</para>
            <para type="description">The Update-JMCFarm cmdlet adds a new farm record to the jXchange server.</para>
            </summary>
            <para type="link">Get-JMCFarm</para>
            <para type="link">Remove-JMCFarm</para>
            <example>
              <code>PS C:\>$cert = Get-JMCCertificates | Where-Object {$_.Subject -match "jxchange-IDG-OPS.AdfsHosting.jha-sys.com"}</code>
              <code>PS C:\>$farm = Get-JMCFarm</code>
              <code>PS C:\>Update-JMCFarm -Thumbprint $cert.Thumbprint -FarmKey $farm.Key</code>
              <para>creates a new JMC farm</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.UpdateJMCFarm.Key">
            <summary>
            <para type="description">Farm Key from any other Get-JMCFarm cmdlet that produces a key.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.UpdateJMCFarm.Thumbprint">
            <summary>
            <para type="description">Thumbprint of the cert from Get-JMCCertificates.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.GetJMCProduct">
            <summary>
            <para type="name">Get-JMCProduct</para>
            <para type="synopsis">Gets all the products from the jxchange server.</para>
            <para type="description">The Get-JMCProduct cmdlet gets all the product version records from a jXchange server farm.</para>
            </summary>
            <example>
              <code>PS C:\>Get-JMCProduct</code>
              <para>gets a list of JMC farms products</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.GetJMCProduct.Name">
            <summary>
            <para type="description">Filter by Name.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.GetJMCFarmMember">
            <summary>
            <para type="name">Get-JMCFarmMember</para>
            <para type="synopsis">Gets a farm members server name from the jxchange server farm.</para>
            <para type="description">The Get-JMCFarmMember cmdlet gets a farm member from the jXchange server.</para>
            </summary>
            <para type="link">Get-JMCFarm</para>
            <para type="link">Remove-JMCFarmMember</para>
            <example>
              <code>PS C:\>$farmRec = Get-JMCFarmMember</code>
              <para>gets a farm member to an existing farm</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.GetJMCFarmMember.Key">
            <summary>
            <para type="description">Farm Key from any other Get-JMCFarm cmdlet that produces a key.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.RemoveJMCFarmMember">
            <summary>
            <para type="name">Remove-JMCFarmMember</para>
            <para type="synopsis">Removes a farm member server name from the jxchange server farm.</para>
            <para type="description">The Remove-JMCFarmMember cmdlet Removes an existing farm member from the jXchange server.</para>
            </summary>
            <para type="link">Get-JMCFarm</para>
            <para type="link">Add-JMCFarmMember</para>
            <example>
              <code>PS C:\>$string = Backup-JMCFarmConfig -JMCFarmConfig $GetJMCFarmConfigData</code>
              <para>creates an xml string from a JMCFarmConfig object</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.RemoveJMCFarmMember.MachineName">
            <summary>
            <para type="description">Machine Name to remove from the farm record; use Get-JMCFarmMember.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.RemoveJMCFarmMember.Key">
            <summary>
            <para type="description">Farm Key from Get-JMCFarmMember.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.RemoveJMCFarm">
            <summary>
            <para type="name">Remove-JMCFarm</para>
            <para type="synopsis">Removes a farm from the jxchange server.</para>
            <para type="description">The Remove-JMCFarm cmdlet removes a farm record from the jXchange server.</para>
            </summary>
            <para type="link">Get-JMCFarm</para>
            <para type="link">Add-JMCFarm</para>
            <example>
              <code>PS C:\>Get-JMCFarm | where{$_.Thumbprint -eq "C67527153424B25357C5BB642BD22E834569130E"} | Remove-JMCFarm</code>
              <para>removes a farm</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.RemoveJMCFarm.Key">
            <summary>
            <para type="description">Farm Key from Get-JMCFarm.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.AddJMCFarmMember">
            <summary>
            <para type="name">Add-JMCFarmMember</para>
            <para type="synopsis">Adds a farm member server name to the jxchange server farm.</para>
            <para type="description">The Add-JMCFarmMember cmdlet adds a new farm member to the jXchange server.</para>
            </summary>
            <para type="link">Get-JMCFarm</para>
            <para type="link">Remove-JMCFarmMember</para>
            <example>
              <code>PS C:\>$farmRec = Get-JMCFarm</code>
              <code>PS C:\>$farmRec[0] | Add-JMCFarmMember -MachineName "Bob"</code>
              <para>adds a farm member to an existing farm</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.AddJMCFarmMember.MachineName">
            <summary>
            <para type="description">Machine Name to add to the farm record.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.AddJMCFarmMember.Key">
            <summary>
            <para type="description">Farm Key from any other *-JMCFarm* cmdlet that produces a key.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.BackupJMCFarmConfig">
            <summary>
            <para type="name">Backup-JMCFarmConfig</para>
            <para type="synopsis">Converts an object to an xml string.</para>
            <para type="description">The ConvertTo-SerializedString cmdlet creates an object to an xml string.</para>
            </summary>
            <para type="link">Update-JMCFarmConfig</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">Backup-JMCFarmConfig</para>
            <para type="link">Restore-JMCFarmConfig</para>
            <para type="link">Get-JMCCertificates</para>
            <example>
              <code>PS C:\>$string = Backup-JMCFarmConfig -JMCFarmConfig $GetJMCFarmConfigData</code>
              <para>creates an xml string from a JMCFarmConfig object</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.BackupJMCFarmConfig.JMCFarmConfig">
            <summary>
            <para type="description">From Get-JMCFarmConfig</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.AddJMCFarm">
            <summary>
            <para type="name">Add-JMCFarm</para>
            <para type="synopsis">Adds a farm to the jxchange server.</para>
            <para type="description">The Add-JMCFarm cmdlet adds a new farm record to the jXchange server.</para>
            </summary>
            <para type="link">Get-JMCFarm</para>
            <para type="link">Remove-JMCFarm</para>
            <example>
              <code>PS C:\>$cert = Get-JMCCertificates | Where-Object {$_.Subject -match "jxchange-IDG-OPS.AdfsHosting.jha-sys.com"}</code>
              <code>PS C:\>$cert | Add-JMCFarm</code>
              <para>creates a new JMC farm</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.AddJMCFarm.Thumbprint">
            <summary>
            <para type="description">Thumbprint of the cert from Get-JMCCertificates.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.GetJMCFarm">
            <summary>
            <para type="name">Get-JMCFarm</para>
            <para type="synopsis">Gets all the farms from the jxchange server.</para>
            <para type="description">The Get-JMCFarm cmdlet adds all the farm records from a jXchange server farm.</para>
            </summary>
            <para type="link">Get-JMCFarm</para>
            <para type="link">Remove-JMCFarm</para>
            <example>
              <code>PS C:\>Get-JMCFarm</code>
              <para>gets a list of JMC farms</para>
              <para>
              </para>
            </example>
        </member>
        <member name="T:PowerShellJMC.RestoreJMCFarmConfig">
            <summary>
            <para type="name">Restore-JMCFarmConfig</para>
            <para type="synopsis">Converts JMCFarmConfig xml string to a deserialized object.</para>
            <para type="description">The Restore-JMCFarmConfig cmdlet creates a new object from the serialized object xml.</para>
            </summary>
            <para type="link">Update-JMCFarmConfig</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">Backup-JMCFarmConfig</para>
            <para type="link">Restore-JMCFarmConfig</para>
            <para type="link">Get-JMCCertificates</para>
            <example>
              <code>PS C:\>$originalObject = Restore-JMCFarmConfig -JMCFarmConfigXmlString $string</code>
              <para>creates an object from an xml string, this object can be used in Update-JMCFarmConfig to then update it to the settings that were backed up</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.RestoreJMCFarmConfig.JMCFarmConfigXmlString">
            <summary>
            <para type="description">Serialized Object XML from Backup-JMCFarmConfig</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.UpdateJMCFarmConfig">
            <summary>
            <para type="name">Update-JMCFarmConfig</para>
            <para type="synopsis">Updates the farm config on a local or remote ServiceGateway server.</para>
            <para type="description">The Update-JMCFarmConfig cmdlet updates the farm config on a local server or on a remote server.</para>
            </summary>
            <para type="link">Update-JMCFarmConfig</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">Backup-JMCFarmConfig</para>
            <para type="link">Restore-JMCFarmConfig</para>
            <para type="link">Get-JMCCertificates</para>
            <example>
              <code>PS C:\>$config = Get-JMCFarmConfig</code>
              <code>PS C:\>$config.ActiveDirectory.DomainName = "myNewDomain.com"</code>
              <code>PS C:\>Update-JMCFarmConfig -Configuration $config</code>
              <para>This will update the jxchange server farm configuration based on what you get from the farm first.</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.UpdateJMCFarmConfig.Configuration">
            <summary>
            <para type="description">Takes a Get-JMCFarmConfig response.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.GetJMCFarmConfig">
            <summary>
            <para type="name">Get-JMCFarmConfig</para>
            <para type="synopsis">Gets the JMC Farm Config on a local or remote jxchange server.</para>
            <para type="description">The Get-JMCFarmConfig cmdlet get the farm config on a local server or on a remote server.</para>
            </summary>
            <para type="link">Update-JMCFarmConfig</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">Backup-JMCFarmConfig</para>
            <para type="link">Restore-JMCFarmConfig</para>
            <para type="link">Get-JMCCertificates</para>
            <example>
              <code>PS C:\>Get-JMCFarmConfig</code>
              <code>PS C:\>$config.ActiveDirectory.DomainName = "myNewDomain.com"</code>
              <para>This gets the farm config so that it can be changed and sent to Update-JMCFarmConfig.</para>
              <para>
              </para>
            </example>
        </member>
        <member name="T:PowerShellJMC.GetJMCCertificates">
            <summary>
            <para type="name">Get-JMCCertificates</para>
            <para type="synopsis">Gets farm certificates on a local or remote jxchange server.</para>
            <para type="description">The Get-JMCCertificates cmdlet inserts institutions on a local server or on a remote server.</para>
            </summary>
            <para type="link">Add-JMCFarm</para>
            <para type="link">Get-JMCFarmConfig</para>
            <example>
              <code>PS C:\>Get-JMCCertificates</code>
              <para>This gets all the certificates on a jxchange server.</para>
              <para>
              </para>
            </example>
        </member>
        <member name="T:PowerShellJMC.DirectLineWires.AddDLWSubscriberUser">
            <summary>
            <para type="name">Add-DLWSubscriberUser</para>
            <para type="synopsis">Adds a user to the Logical Terminal Subscriber Information Security tab on a local or remote ServiceGateway server.</para>
            <para type="description">The Add-DLWSubscriberUser cmdlet inserts a user into the Security tab for DLW on a local server or on a remote server.</para>
            </summary>
            <para type="link">Add-DLWLogicalTerminal</para>
            <para type="link">Get-DLWLogicalTerminal</para>
            <para type="link">Add-DLWUser</para>
            <para type="link">Get-DLWSubscriber</para>
            <para type="link">Add-DLWSubscriber</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-DLWSubscriberUser -LogicalTerminalIdentifier MMQFMCU2 -ABA 222222222 -UserName jxsupport@qa.edn -Verbose</code>
              <para>This Adds a user to the DLW LTerm Subscriber Security Tab, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-DLWSubscriberUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-DLWSubscriberUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriberUser.LogicalTerminalIdentifier">
            <summary>
            <para type="description">The LogicalTerminalIdentifier in DLI.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriberUser.ABA">
            <summary>
            <para type="description">The Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriberUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Institution Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriberUser.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PowerShellJMC.DirectLineWires.RemoveDLWSubscriber" -->
        <member name="P:PowerShellJMC.DirectLineWires.RemoveDLWSubscriber.LogicalTerminalIdentifier">
            <summary>
            <para type="description">The LogicalTerminalIdentifier in DLI.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.RemoveDLWSubscriber.ABA">
            <summary>
            <para type="description">The Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.RemoveDLWSubscriber.Force">
            <summary>
            <para type="description">(Optional) toggle force to not be prompted yes or no to delete.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.RemoveDLWSubscriber.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.DirectLineWires.RemoveDLWLogicalTerminal">
            <summary>
            <para type="name">Remove-DLWLogicalTerminal</para>
            <para type="synopsis">Removes a Logical Terminal from the Manage Logical Terminals screen in on a local or remote DLW/Fedline Global server.</para>
            <para type="description">The Remove-DLWLogicalTerminal cmdlet gets Logical Terminals from the DLW  on a local server or on a remote server.</para>
            <para type="description">To use Remove-DLWLogicalTerminal, pipe an object or pipe an csv file or pass parameters to Remove-DLWLogicalTerminal.</para>
            </summary>
            <para type="link">Add-DLWLogicalTerminal</para>
            <para type="link">Get-DLWLogicalTerminal</para>
            <para type="link">Add-DLWUser</para>
            <para type="link">Get-DLWSubscriber</para>
            <para type="link">Add-DLWSubscriber</para>
            <para type="link">Add-DLWSubscriberUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Remove-DLWLogicalTerminal -LogicalTerminalIdentifier MMQFMCU2</code>
              <para>This Removes a Logical Terminal, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Remove-DLWLogicalTerminal</code>
              <para>This takes a csv file with named columns and pipe's them into Remove-DLWLogicalTerminal, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.RemoveDLWLogicalTerminal.LogicalTerminalIdentifier">
            <summary>
            <para type="description">The LogicalTerminalIdentifier in DLI.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.RemoveDLWLogicalTerminal.Force">
            <summary>
            <para type="description">(Optional) toggle force to not be prompted yes or no to delete.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.RemoveDLWLogicalTerminal.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.DirectLineWires.AddDLWSubscriber">
            <summary>
            <para type="name">Add-DLWSubscriber</para>
            <para type="synopsis">Adds a Subscriber to a Logical Terminal from the Manage Logical Terminals screen in on a local or remote DLW/Fedline Global server.</para>
            <para type="description">The Add-DLWSubscriber cmdlet Adds a Subscriber to a Logical Terminal from the DLW  on a local server or on a remote server.</para>
            <para type="description">To use Add-DLWSubscriber, pipe an object or pipe an csv file or pass parameters to Add-DLWSubscriber.</para>
            </summary>
            <para type="link">Add-DLWLogicalTerminal</para>
            <para type="link">Get-DLWLogicalTerminal</para>
            <para type="link">Add-DLWUser</para>
            <para type="link">Get-DLWSubscriber</para>
            <para type="link">Add-DLWSubscriberUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-DLWSubscriber -LogicalTerminalIdentifier MMQFMCU2 -ABA 222222222 -RqRpRoutingID 222222222 -ShipToBillTo 123 -ServiceGatewayServer sg.com -BroadcastServer be.com -ServiceUsername user -ServicePassword pass -ContactInfo "4172356652 matt"</code>
              <para>This Adds a Subscriber to a Logical Terminal, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-DLWSubscriber</code>
              <para>This takes a csv file with named columns and pipe's them into Add-DLWSubscriber, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.LogicalTerminalIdentifier">
            <summary>
            <para type="description">The LogicalTerminalIdentifier in DLI.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.ABA">
            <summary>
            <para type="description">The Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.MasterABA">
            <summary>
            <para type="description">(Optional) The Subscriber MasterABA, if left blank it will use the Aba field.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.Name">
            <summary>
            <para type="description">Name Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.RqRpRoutingID">
            <summary>
            <para type="description">(Optional) The Subscriber Request and Reploy Routing ID, if left blank it will use the Aba field.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.ShipToBillTo">
            <summary>
            <para type="description">The Ship To and Bill To number for the Subscriber.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.ServiceGatewayServer">
            <summary>
            <para type="description">The ServiceGateway Host servername for the Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.BroadcastServer">
            <summary>
            <para type="description">The Broadcast Servername for the Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.StsServer">
            <summary>
            <para type="description">The STS Server Host name for the Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.SgUsername">
            <summary>
            <para type="description">The SG Service Username for the Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.SgPassword">
            <summary>
            <para type="description">The SG Service Password for the Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.BeUsername">
            <summary>
            <para type="description">The BE Service Username for the Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.BePassword">
            <summary>
            <para type="description">The BE Service Password for the Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.ContactInfo">
            <summary>
            <para type="description">The Contact info for the Subscriber ABA.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWSubscriber.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.DirectLineWires.AddDLWUser">
            <summary>
            <para type="name">Add-DLWUser</para>
            <para type="synopsis">Adds a user to the Operation Authorization section on a local or remote DLW server.</para>
            <para type="description">The Add-DLWUser cmdlet inserts users into the Operation AUthorization for DLW on a local server or on a remote server.</para>
            </summary>
            <para type="link">Add-DLWLogicalTerminal</para>
            <para type="link">Get-DLWLogicalTerminal</para>
            <para type="link">Get-DLWSubscriber</para>
            <para type="link">Add-DLWSubscriber</para>
            <para type="link">Add-DLWSubscriberUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-DLWUser -UserName "user@domain.com" -Verbose</code>
              <para>This Adds a user to the DLW Operation Authorization, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Add-DLWUser -UserName "user@domain.com" -Operations FedStatInq, Ping -Verbose</code>
              <para>This Adds a user to the DLW Operation Authorization and checks the specified operations, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-DLWUser</code>
              <para>This takes a csv file with named columns and pipe's them into Add-DLWUser, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWUser.UserName">
            <summary>
            <para type="description">UserName of the user for the Operation Authorization Security.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWUser.Operations">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operations, leave this blank for all operations and OperationGroups blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWUser.OperationGroups">
            <summary>
            <para type="description">Optional: Operation array of the Selected message operation in a group, leave this blank for all operations and Operations blank.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWUser.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.DirectLineWires.AddDLWUser.AddUser(PowerShellJMC.DirectLineWires.AddDLWUser)">
            <summary>
            Adds the dlw user.
            </summary>
            <param name="pipeline">The pipeline user.</param>
        </member>
        <member name="T:PowerShellJMC.DirectLineWires.AddDLWLogicalTerminal">
            <summary>
            <para type="name">Add-DLWLogicalTerminal</para>
            <para type="synopsis">Adds a Logical Terminal from the Manage Logical Terminals screen in on a local or remote DLW/Fedline Global server.</para>
            <para type="description">The Add-DLWLogicalTerminal cmdlet Adds Logical Terminals into DLW on a local server or on a remote server.</para>
            <para type="description">To use Add-DLWLogicalTerminal, pipe an object or pipe an csv file or pass parameters to Add-DLWLogicalTerminal.</para>
            </summary>
            <para type="link">Get-DLWLogicalTerminal</para>
            <para type="link">Add-DLWUser</para>
            <para type="link">Get-DLWSubscriber</para>
            <para type="link">Add-DLWSubscriber</para>
            <para type="link">Add-DLWSubscriberUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Add-DLWLogicalTerminal -LogicalTerminalIdentifier MMQFMCU2 -LeadAba 222222222 -Description "Monett, Mo - JHA" -QueueEnv Production -QueuePattern A3</code>
              <para>This adds a Logical Terminal to DLW, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Add-DLWLogicalTerminal</code>
              <para>This takes a csv file with named columns and pipe's them into Add-DLWLogicalTerminal, -Verbose is optional...</para>
              <para>
              </para>
            </example>   
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWLogicalTerminal.LogicalTerminalIdentifier">
            <summary>
            <para type="description">The LogicalTerminalIdentifier in DLI.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWLogicalTerminal.LeadAba">
            <summary>
            <para type="description">The LeadAba on LTerm.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWLogicalTerminal.Description">
            <summary>
            <para type="description">Description of the DLI Lterm.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWLogicalTerminal.QueueEnv">
            <summary>
            <para type="description">Queue Environment of the DLI Lterm.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWLogicalTerminal.QueuePattern">
            <summary>
            <para type="description">Queue Pattern of the DLI Lterm. A3 mostly.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.AddDLWLogicalTerminal.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.DirectLineWires.GetDLWSubscriber">
            <summary>
            <para type="name">Get-DLWSubscriber</para>
            <para type="synopsis">Gets a Logical Terminal Subscriber from the Manage Logical Terminals screen in on a local or remote DLW/Fedline Global server.</para>
            <para type="description">The Get-DLWSubscriber cmdlet gets Logical Terminal Subscribers from the DLW  on a local server or on a remote server.</para>
            <para type="description">To use Get-DLWSubscriber, pipe an object or pipe an csv file or pass parameters to Get-DLWSubscriber.</para>
            </summary>
            <para type="link">Add-DLWLogicalTerminal</para>
            <para type="link">Get-DLWLogicalTerminal</para>
            <para type="link">Add-DLWUser</para>
            <para type="link">Add-DLWSubscriber</para>
            <para type="link">Add-DLWSubscriberUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Get-DLWSubscriber</code>
              <para>This gets all subscribers from DLI, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-DLWSubscriber -Aba 111111112</code>
              <para>This gets only subscribers with specified ABA from DLI, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-DLWSubscriber -LogicalTerminalIdentifier MMQFMCU1</code>
              <para>This gets only subscribers with specified LogicalTerminalIdentifier from DLI, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-DLWSubscriber</code>
              <para>This takes a csv file with named columns and pipe's them into Get-DLWSubscriber, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.GetDLWSubscriber.LogicalTerminalIdentifier">
            <summary>
            <para type="description">(Optional) Filters by the specific LogicalTerminalIdentifier in DLI.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.GetDLWSubscriber.Aba">
            <summary>
            <para type="description">(Optional) Filters by the specified LeadAba on LTerm.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.GetDLWSubscriber.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.DirectLineWires.GetDLWLogicalTerminal">
            <summary>
            <para type="name">Get-DLWLogicalTerminal</para>
            <para type="synopsis">Gets a Logical Terminal from the Manage Logical Terminals screen in on a local or remote DLW/Fedline Global server.</para>
            <para type="description">The Get-DLWLogicalTerminal cmdlet gets Logical Terminals from the DLW  on a local server or on a remote server.</para>
            <para type="description">To use Get-DLWLogicalTerminal, pipe an object or pipe an csv file or pass parameters to Get-DLWLogicalTerminal.</para>
            </summary>
            <para type="link">Add-DLWLogicalTerminal</para>
            <para type="link">Add-DLWUser</para>
            <para type="link">Get-DLWSubscriber</para>
            <para type="link">Add-DLWSubscriber</para>
            <para type="link">Add-DLWSubscriberUser</para>
            <para type="link">New-JMCConnection</para>
            <para type="link">ConvertTo-Splat</para>
            <para type="link" uri="https://www.powershellgallery.com/packages/ImportExcel">Import-Excel;</para>
            <para type="link">PS C:\> Install-Module -Name ImportExcel</para>
            <example>
              <code>PS C:\>Get-DLWLogicalTerminal</code>
              <para>This gets all Logical Terminals from DLW, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-DLWLogicalTerminal -LeadAba 111111111</code>
              <para>This gets a selection of Logical Terminal from DLW, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Get-DLWLogicalTerminal -LogicalTerminalIdentifier MMQFMCU1</code>
              <para>This gets a selection of Logical Terminal from DLW, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>Import-Excel -Path .\inport-file.xlsx | Get-DLWLogicalTerminal</code>
              <para>This takes a csv file with named columns and pipe's them into Get-DLWLogicalTerminal, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.GetDLWLogicalTerminal.LogicalTerminalIdentifier">
            <summary>
            <para type="description">(Optional) Filters by the specific LogicalTerminalIdentifier in DLI.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.GetDLWLogicalTerminal.LeadAba">
            <summary>
            <para type="description">(Optional) Filters by the specified LeadAba on LTerm.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.DirectLineWires.GetDLWLogicalTerminal.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.ConvertToSplat">
            <summary>
            <para type="name">ConvertTo-Splat</para>
            <para type="synopsis">Converts JMC Cmdlets to a hashtable splat.</para>
            <para type="description">The ConvertTo-Splat cmdlet creates a new hashtable that has all the parameters in it to splat with.</para>
            <para type="description">To use ConvertTo-Splat, pass parameters to ConvertTo-Splat with a JMC cmdlet.</para>
            </summary>
            <para type="link">Add-SGInstitution</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">New-JMCConnection</para>
            <example>
              <code>PS C:\>ConvertTo-Splat Get-SGInsitution</code>
              <para>creates a genereic hash table for Get-SGInsitution</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS C:\>$mySplat = ConvertTo-Splat Get-SGInsitution</code>
              <para>This converts the cmdlet into a splat hashtable.</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.ConvertToSplat.Name">
            <summary>
            <para type="description">Name of the cmdlet.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.NewJMCConnection">
            <summary>
            <para type="name">New-JMCConnection</para>
            <para type="synopsis">Creates a new JMC Connection to access a local or remote ServiceGateway server.</para>
            <para type="description">The New-JMCConnection cmdlet creates connection settings to local server or on a remote server.</para>
            <para type="description">To use New-JMCConnection, pipe an object or pass parameters to New-JMCConnection.</para>
            <para type="description">Then pass the New-JMCConnection as a parm into other PowerShellJMC cmdlets.</para>
            </summary>
            <para type="link">Add-SGInstitution</para>
            <para type="link">Import-SGInstitution</para>
            <para type="link">Export-SGInstitution</para>
            <para type="link">Remove-SGInstitution</para>
            <para type="link">Add-SGUser</para>
            <para type="link">Add-SGProvider</para>
            <para type="link">Get-SGProviderType</para>
            <para type="link">Get-SGProvider</para>
            <para type="link">Get-SGInstitution</para>
            <para type="link">Import-SGMetadata</para>
            <para type="link">New-TimeSpan</para>
            <para type="link">ConvertTo-SecureString</para>
            <para type="link">ConvertTo-Splat</para>
            <example>
              <code>PS>$connection = New-JMCConnection -JMCServerName jx2.jackhenry.com
            PS>$institutions = Get-SGInstitution -JMCConnection $connection</code>
              <para>Use this to change the server name only. This takes parameters so that you can pass it as a parm into an *-SG* cmdlets, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS>$password = ConvertTo-SecureString -String "CHANGETOGOODPASSWORD" -Force -AsPlainText
            PS>$connection = New-JMCConnection -JMCServerName jx2.jackhenry.com -JMCUserName username@domain.com -JMCPassword $password
            PS>$institutions = Get-SGInstitution -JMCConnection $connection</code>
              <para>This takes parameters so that you can pass it as a parm into an *-SG* cmdlets, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS>$timeSpan = New-TimeSpan -Hours 1 -Minutes 1 -Seconds 1
            PS>$password = ConvertTo-SecureString -String "CHANGETOGOODPASSWORD" -Force -AsPlainText
            PS>$connection = New-JMCConnection -JMCServerName jx2.jackhenry.com -JMCUserName username@domain.com -JMCPassword $password -JMCPassword $password -CloseTimeout $timeSpan -OpenTimeout $timeSpan -ReceiveTimeout $timeSpan -SendTimeout $timeSpan
            PS>$institutions = Get-SGInstitution -JMCConnection $connection</code>
              <para>Specify the Timeout Override. This takes parameters so that you can pass it as a parm into an *-SG* cmdlets, -Verbose is optional...</para>
              <para>
              </para>
            </example>
            <example>
              <code>PS>$cred = Get-Credential -Message "Enter an account to access the jXChange Server:" 
            PS>$connection = New-JMCConnection -JMCServerName jx15padapter.idg.jha-sys.com -JMCUserName $cred.UserName -JMCPassword $cred.Password</code>
              <para>Specify a credential to prompt for the username and password. This takes parameters so that you can pass it as a parm into an *-SG* cmdlets, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.NewJMCConnection.JMCServerName">
            <summary>
            <para type="description">JMCServerName of the server that is connected to.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.NewJMCConnection.JMCUserName">
            <summary>
            <para type="description">(Optional) Username for the connection in 'user@domain.com' format.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.NewJMCConnection.JMCPassword">
            <summary>
            <para type="description">(Optional) Password for the connection.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.NewJMCConnection.CloseTimeout">
            <summary>
            <para type="description">(Optional) CloseTimeout setting for the connection.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.NewJMCConnection.OpenTimeout">
            <summary>
            <para type="description">(Optional) OpenTimeout setting for the connection.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.NewJMCConnection.ReceiveTimeout">
            <summary>
            <para type="description">(Optional) ReceiveTimeout setting for the connection.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.NewJMCConnection.SendTimeout">
            <summary>
            <para type="description">(Optional) SendTimout setting for the connection.</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.SetJxAdfsAccountAuth">
            <summary>
            <para type="name">Set-JxAdfsAccountAuth</para>
            <para type="synopsis">Sets the authority in the jxchange instance db for the Adfs Account.</para>
            <para type="description">The Set-JxAdfsAccountAuth cmdlet authorizes the adfs account in the instance where the IdentityManagement database is located.</para>
            </summary>
            <example>
              <code>PS C:\>Set-JxAdfsAccountAuth -IMSDataSource "db1\jfordyce" -AdfsAccount "JXLAB\jx-adfs-svc"</code>
              <para>Be sure to pass in all the parm values, they are all required, -Verbose is optional...</para>
              <para>
              </para>
            </example>
        </member>
        <member name="P:PowerShellJMC.SetJxAdfsAccountAuth.IMSDataSource">
            <summary>
            <para type="description">IMS  Data Source in 'SERVER\Instance' format.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.SetJxAdfsAccountAuth.AdfsAccount">
            <summary>
            <para type="description">This is the account on the ADFS Service in DOMAIN\Account format. This is required for ADFS to log into the the IdentityManagement database.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.SetJxAdfsAccountAuth.OverrideDefaultSQLConnectionString">
            <summary>
            <para type="description">Overrides the default connection string. Default is: 'data source={0};initial catalog=IdentityManagement;Integrated Security=SSPI;Application Name=jXADFS2ClaimsProviderTrust'</para>
            </summary>
        </member>
        <member name="T:PowerShellJMC.TestIAdapterPort">
             <summary>
             <para type="name">Test-IAdapterPort</para>
             <para type="synopsis">This gives the ablility to test an iAdapter Port.</para>
             <para type="description">The Test-IAdapterPort a success or failure on a port test, this can be used in a site transition.</para>
             </summary>
             <example>
               <code>
            PS C:\> Test-IAdapterPort -ServerName techserv.jhacorp.com -Port 40820 -UseSSL $true
               </code>
               <para>This will test a single port, -Verbose is optional...</para>
             </example>
             <example>
               <code>
            PS C:\>  Get-SGInstitution | Get-SGProvider -WarningAction SilentlyContinue | Test-IAdapterPort
               </code>
               <para>This will test all the silverlake and CIF2020 ports, -Verbose is optional...</para>
             </example>
             <example>
               <code>
            PS C:\> Get-SGInstitution -FilterByProvider CIF2020 | Get-SGProvider | Test-IAdapterPort
               </code>
               <para>This will test all the CIF2020 ports, -Verbose is optional...</para>
             </example>
             <example>
               <code>
            PS C:\> Get-SGInstitution -ABA 113102552 -Environment Test | Get-SGProvider | Test-IAdapterPort
               </code>
               <para>This will test all the Silverlake ports, -Verbose is optional...</para>
             </example>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.Name">
            <summary>
            <para type="description">Name of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.ABA">
            <summary>
            <para type="description">ABA (Routing ID) of the Institution. This will error if you go over 9 digits and throw a warning if under 9 digits.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.Environment">
            <summary>
            <para type="description">Environment of the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.Provider">
            <summary>
            <para type="description">Provider object from a New-SGProvider* cmdlet.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.ProviderTypeName">
            <summary>
            <para type="description">Provider Type Name of the provider. This is located in the JMC, in the institution, on the provider tab, in the 'Provider Type Name' column value is the one needed here.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.ServerName">
            <summary>
            <para type="description">ServerName or IP of the iAdapter Host.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.Port">
            <summary>
            <para type="description">Port of the iAdapter Host.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.UseSSL">
            <summary>
            <para type="description">Use SSL for the Port of the iAdapter Host.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.JMCConnection">
            <summary>
            <para type="description">(Optional) New-JMCConnection to access the server for the Institution.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.Delay">
            <summary>
            <para type="description">(Optional) Allows you to set the milliseconds to delay between each record.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.StatusMessage">
            <summary>
            <para type="description">The Return Status Message of the cmdlet.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestIAdapterPort.Status">
            <summary>
            <para type="description">The Return Status of the cmdlet.</para>
            </summary>
        </member>
        <member name="M:PowerShellJMC.TestIAdapterPort.BeginProcessing">
            <summary>
            Begins the processing.
            </summary>
        </member>
        <member name="M:PowerShellJMC.TestIAdapterPort.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="T:PowerShellJMC.TestAdfsRP">
             <summary>
             <para type="name">Test-AdfsRP</para>
             <para type="synopsis">This gives the ablility to test a relying parties claims.</para>
             <para type="description">The Test-AdfsRP cmdlet returns the claims from a relying party.</para>
             </summary>
             <example>
               <code>
            PS C:\>$rpCert = dir Cert:\LocalMachine\My | Out-GridView -Title "Select the Relying Party Certificate, then click OK." -PassThru
            PS C:\> $signingCert = dir Cert:\LocalMachine\My | Out-GridView -Title "Select the Signing Certificate, then click OK." -PassThru
            PS C:\> Test-AdfsRP -Username "user@domain.com" -Password "PASSWORD" -AdfsFQDN[FQDN of ADFS Farm] -RelyingPartyIdentifier[RPIdentifier] -AdfsRP $rpCert -TokenSigningCertificate $signingCert | Format-Table -Property Type, Value</code>
               <para>Be sure to pass in all the parm values, they are all required, -Verbose is optional...</para>
               <para>
               </para>
             </example>
        </member>
        <member name="P:PowerShellJMC.TestAdfsRP.Username">
            <summary>
            <para type="description">Username in user@domain.com format.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestAdfsRP.Password">
            <summary>
            <para type="description">Account Password.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestAdfsRP.AdfsFQDN">
            <summary>
            <para type="description">ADFS Server FQDN</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestAdfsRP.RelyingPartyIdentifier">
            <summary>
            <para type="description">ADFS Relying Party Identifier. e.g. 'http://jackhenry.com/application/jxchange/ims'</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestAdfsRP.AdfsRP">
            <summary>
            <para type="description">ADFS Relying Party private key certificate.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.TestAdfsRP.TokenSigningCertificate">
            <summary>
            <para type="description">ADFS Token Signing Public certificate.</para>
            </summary>
        </member>
        <member name="P:PowerShellJMC.GetSGProviderType.Name">
            <summary>
            Gets or sets the name of the Institution.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:PowerShellJMC.GetAppConfigFile">
            <summary>
            
            </summary>
            <seealso cref="T:System.Management.Automation.Cmdlet" />
        </member>
        <member name="M:PowerShellJMC.GetAppConfigFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PowerShellJMC.GetAppConfigFile"/> class.
            </summary>
        </member>
        <member name="M:PowerShellJMC.GetAppConfigFile.BeginProcessing">
            <summary>
            Begins the processing.
            </summary>
        </member>
        <member name="M:PowerShellJMC.GetAppConfigFile.ProcessRecord">
            <summary>
            Processes the record.
            </summary>
        </member>
        <member name="T:PowerShellJMC.CustomTypes.EntityDescriptor">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.EntityDescriptor.RoleDescriptor">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.EntityDescriptor.ID">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.EntityDescriptor.entityID">
            <remarks/>
        </member>
        <member name="T:PowerShellJMC.CustomTypes.EntityDescriptorRoleDescriptor">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.EntityDescriptorRoleDescriptor.KeyDescriptor">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.EntityDescriptorRoleDescriptor.TargetScopes">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.EntityDescriptorRoleDescriptor.SecurityTokenServiceEndpoint">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.EntityDescriptorRoleDescriptor.protocolSupportEnumeration">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.EntityDescriptorRoleDescriptor.ServiceDisplayName">
            <remarks/>
        </member>
        <member name="T:PowerShellJMC.CustomTypes.EntityDescriptorRoleDescriptorKeyDescriptor">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.EntityDescriptorRoleDescriptorKeyDescriptor.KeyInfo">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.EntityDescriptorRoleDescriptorKeyDescriptor.use">
            <remarks/>
        </member>
        <member name="T:PowerShellJMC.CustomTypes.KeyInfo">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.KeyInfo.X509Data">
            <remarks/>
        </member>
        <member name="T:PowerShellJMC.CustomTypes.KeyInfoX509Data">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.KeyInfoX509Data.X509Certificate">
            <remarks/>
        </member>
        <member name="T:PowerShellJMC.CustomTypes.TargetScopes">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.TargetScopes.EndpointReference">
            <remarks/>
        </member>
        <member name="T:PowerShellJMC.CustomTypes.EndpointReference">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.EndpointReference.Address">
            <remarks/>
        </member>
        <member name="T:PowerShellJMC.CustomTypes.SecurityTokenServiceEndpoint">
            <remarks/>
        </member>
        <member name="P:PowerShellJMC.CustomTypes.SecurityTokenServiceEndpoint.EndpointReference">
            <remarks/>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionDetailBuilders.JxchangeApplicationExceptionDetailBuilder">
            <summary>
            UnhandledJxchangeExceptionDetailBuilder is designed to process the given exception message
            and to create SoapFault'detail nodes for the given exception.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionDetailBuilders.JxchangeApplicationExceptionDetailBuilder.GetFaultString">
            <summary>
            This virtual method is defined to get the SoapFault string from the ResourceHelper.
            </summary>
            <returns>The standard fault string</returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionDetailBuilders.JxchangeApplicationExceptionDetailBuilder.GetDetail(System.Exception)">
            <summary>
            Provides the contents of a SOAP Fault's detail section.  Null is allowed 
            (causes empty detail tag in SOAP Fault).
            </summary>
            <remarks>
            The schmea of a given SOAP Fault's detail section should be described
            in the services WSDL.  Each operation in a WSDL can indicate SOAP Faults
            that may be thrown from that operation.  All non-standard (not mentioned 
            in SOAP specification) SOAP faults should be captured in the services WSDL.
            </remarks>
            <param name="exception">the exception to convert into a SOAP Fault</param>
            <returns>Fault Message</returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionDetailBuilders.JxchangeApplicationExceptionDetailBuilder.GetDetailMessages(JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException)">
            <summary>
            This virtual method returns Exception detail messages as MsgRec array.
            </summary>
            <param name="exception">exception is of type JxchangeApplicationException</param>
            <returns>messages which is of MsgRec[] type. </returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionDetailBuilders.JxchangeApplicationExceptionDetailBuilder.GetDetailMessagesBusinessException(JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException)">
            <summary>
            Gets the detail messages business exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>An array of FaultMsgRec_CType</returns>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionDetailBuilders.SystemExceptionDetailBuilder">
            <summary>
            This class handles the creation of the detail nodes
            of a SoapFault for a System exception.  It does not 
            derive from JxchangeExceptionDescriptionBuilderBase
            because it deals with an Exception object.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionDetailBuilders.SystemExceptionDetailBuilder.GetFaultString">
            <summary>
            This virtual method is defined to get the SoapFault string from the ResourceHelper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionDetailBuilders.SystemExceptionDetailBuilder.GetDetail(System.Exception)">
            <summary>
            Provides the contents of a SOAP Fault's exception message. 
            The exception message is assigned to the error xmlnode's innertext
            and returned to the calling method.
            </summary>
            <remarks>
            </remarks>
            <param name="exception">the exception to convert into a SOAP Fault</param>
            <returns>Fault Message</returns>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionHandler">
            <summary>
            ExceptionHandler is gateway entry class for handling the system exceptions 
            thrown from different services.
            The system exceptions are redirected to proper custom exception handlers and 
            processors at this level.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionHandler.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionHandler"/> class from being created.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionHandler.HandleException(System.Exception)">
            <summary>
            This is the main function which redirects the given exception to the correct
            custom exception.
            </summary>
            <param name="exception">The exception to be handled.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionHandler.CleanXmlString(System.String)">
            <summary>
            Cleans the XML string.
            </summary>
            <param name="dirtyString">The dirty string.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ExceptionHandler.IsLegalXmlChar(System.Int32)">
            <summary>
            Whether a given character is allowed by XML 1.0.
            </summary>
            <param name="character">The character.</param>
            <returns>
                <c>true</c> if [is legal XML char] [the specified character]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException">
            <summary>
            This class defines the exceptions need to be used for conveying ifx related 
            exceptions to the  soap layer.
            </summary>
            <remarks>
            The class name [BusinessException] and class file name IfxException are different.
            </remarks>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException.messageRecords">
            <summary>
            The collection of fault messages.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException"/> class.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException"/> class.
            </summary>
            <param name="code">Exception code</param>
            <param name="description">Exception description</param>
            <param name="type">Exception type</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException"/> class.
            </summary>
            <param name="code">Exception code</param>
            <param name="description">Exception description</param>
            <param name="type">Exception type</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException.#ctor(System.Collections.ObjectModel.Collection{JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultMsgRec_CType})">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException"/> class.
            </summary>
            <param name="messageRecordList">The message record list.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException.MessageRecords">
            <summary>
            Gets the message records.
            </summary>
            <value>The message records.</value>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.BusinessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
             <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
             <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ConnectionException">
            <summary>
            Exceptions thrown by database connections when there is an exception
            with the connection.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ConnectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ConnectionException"/> class.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ConnectionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.DataAccessLayerException">
            <summary>
            Class to handle exceptions thrown by data access layer 
            </summary>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException">
            <summary>
            Base of all exceptions generated by the Third Party Gateway.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.code">
            <summary>
            Code for the Application Exception
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.description">
            <summary>
            Description of the exception
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.severity">
            <summary>
            Severity of the exception.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.exceptionType">
            <summary>
            Type of exception.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.element">
            <summary>
            Element of exception.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.elementValue">
            <summary>
            ElementValue of exception.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.location">
            <summary>
            Location of where the error occured
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the JxchangeException class.
            Hardcoded severity because it should not be allowed to be changed for an exception.
            </summary>
            <param name="code">Code for the exception.</param>
            <param name="description">Description of the exception.</param>
            <param name="type">Type of the exception.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException"/> class.
            Hardcoded severity because it should not be allowed to be changed for an exception.
            </summary>
            <param name="code">The code for the exception.</param>
            <param name="description">The description for the exception.</param>
            <param name="type">The type of the exception.</param>
            <param name="innerException">The inner exception of the exception.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the JxchangeException class.
            Hardcoded severity because it should not be allowed to be changed for an exception.
            </summary>
            <param name="code">Code for the exception.</param>
            <param name="description">Description of the exception.</param>
            <param name="type">Type of the exception.</param>
            <param name="element">Element for the exception.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.#ctor(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the JxchangeException class.
            Hardcoded severity because it should not be allowed to be changed for an exception.
            </summary>
            <param name="code">Code for the exception.</param>
            <param name="description">Description of the exception.</param>
            <param name="type">Type of the exception.</param>
            <param name="element">Element for the exception.</param>
            <param name="innerException">InnerException of the exception.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the JxchangeException class.
            Hardcoded severity because it should not be allowed to be changed for an exception.
            </summary>
            <param name="code">Code for the exception.</param>
            <param name="description">Description of the exception.</param>
            <param name="type">Type of the exception.</param>
            <param name = "element">Element of the exception</param>
            <param name="elementValue">Element value of the exception</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.#ctor(System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the JxchangeException class.
            Hardcoded severity because it should not be allowed to be changed for an exception.
            </summary>
            <param name="code">Code for the exception.</param>
            <param name="description">Description of the exception.</param>
            <param name="type">Type of the exception.</param>
            <param name = "element">Element of the exception</param>
            <param name="elementValue">Element value of the exception.</param>
            <param name="innerException">InnerException of the exception.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the JxchangeException class.
            Hardcoded severity because it should not be allowed to be changed for an exception.
            </summary>
            <param name="code">Code for the exception.</param>
            <param name="description">Description of the exception.</param>
            <param name="type">Type of the exception.</param>
            <param name = "element"> elem of the exception</param>
            <param name = "elementValue"> elemVal of the exception</param>
            <param name = "location"> location of the exception</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the JxchangeException class.
            Hardcoded severity because it should not be allowed to be changed for an exception.
            </summary>
            <param name="code">Code for the exception.</param>
            <param name="description">Description of the exception.</param>
            <param name="type">Type of the exception.</param>
            <param name = "element"> elem of the exception</param>
            <param name = "elementValue"> elemVal of the exception</param>
            <param name = "location"> location of the exception</param>
            <param name="innerException">InnerException of the exception</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException"/> class.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.Code">
            <summary>
            Gets or sets the code.
            </summary>
            <value>The code of the exception.</value>
        </member>
        <member name="P:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description of the exception.</value>
        </member>
        <member name="P:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.Severity">
            <summary>
            Gets or sets the severity.
            </summary>
            <value>The severity of the exception.</value>
        </member>
        <member name="P:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.ExceptionType">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type of exception.</value>
        </member>
        <member name="P:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.Element">
            <summary>
            Gets or sets the element name.
            </summary>
            <value>The element name.</value>
        </member>
        <member name="P:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.ElementValue">
            <summary>
            Gets or sets the element value.
            </summary>
            <value>The element value.</value>
        </member>
        <member name="P:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location of the exception.</value>
        </member>
        <member name="P:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
            <value></value>
            <returns>
            A string that describes the contents of the call stack, with the most recent method call appearing first.
            </returns>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.JxchangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ServerException">
            <summary>
            Exception is thrown when there is an exception with the server.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ServerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ServerException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ServerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ServerException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ServerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ServerException"/> class.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.Exceptions.ServerException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ISoapFaultBuilder">
            <summary>
            <p>Interface for the exception description builder.</p>
            </summary>
            <remarks>
            Used to get the customizable section of a SOAP Fault.  May be used
            in SOAP message body or header.  The SOAP fault string should provide
            what the general error is in human readable format.  The SOAP fault string should
            also suggest likely causes of the fault.  The SOAP fault string should not provide
            any details about the implementation code (no stack trace info,line numbers,etc.).
            
            The detail section is were to place the details of a given fault.  See the <code>
            GetDetail</code> documentation on details about how the detail messages should be
            captured in a Service's WSDL doc.  The detail section should not contain any references
            to the implementation's code just as the fault string should not.
            </remarks>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.ISoapFaultBuilder.GetDetail(System.Exception)">
            <summary>
            Provides the contents of a SOAP Fault's detail section.  Null is allowed 
            (causes empty detail tag in SOAP Fault).
            </summary>
            <remarks>
            The schmea of a given SOAP Fault's detail section should be described
            in the services WSDL.  Each operation in a WSDL can indicate SOAP Faults
            that may be thrown from that operation.  All non-standard (not mentioned 
            in SOAP specification) SOAP faults should be captured in the services WSDL.
            </remarks>
            <param name="exception">the exception to convert into a SOAP Fault</param>
            <returns></returns>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode">
            <summary>
            Enumeration values for FaultCode
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode.Client">
            <summary>
            This represents the Soap 1.1 client based fault code.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode.Server">
            <summary>
            This represents the Soap 1.1 server based fault code.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode.MustUnderstandFaultCode">
            <summary>
            This represents the Soap 1.1 MustUnderstand fault code.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode.VersionMismatchFaultCode">
            <summary>
            This represents the Soap 1.1 VersionMismatch fault code.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode.Sender">
            <summary>
            This represents the Soap 1.2 client based fault code.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode.Receiver">
            <summary>
            This represents the Soap 1.2 server based fault code.
            </summary>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.SoapFaultHandler">
            <summary>
            This class handles Jxchange Soap Faults
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.SoapFaultHandler.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.SoapFaultHandler"/> class from being created.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.SoapFaultHandler.HandleException(System.Exception,JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode,System.Boolean)">
            <summary>
            Builds a Soap Exception based on the input exception.
            </summary>
            <param name="exceptionToHandle">The exception to handle.</param>
            <param name="faultCode">The fault code.</param>
            <param name="throwFaultException">if set to <c>true</c> [throw fault exception].</param>
            <returns>
            FaultException based on the exception being handled
            </returns>
            <remarks>
            If the exception is a JxchangeException subclass, then its builder is invoked.
            </remarks>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.SoapFaultHandler.HandleException(System.Exception,JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode)">
            <summary>
            Overload of handleException which does not require the throwSoapException boolean
            flag.
            </summary>
            <remarks>
            This method ALWAYS throws the SoapException
            </remarks>
            <param name="exceptionToHandle">Incoming exception to create a SoapException around.</param>
            <param name="faultCode">The fault code of the SoapException.</param>
            <returns>The built FaultException.</returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.SoapFaultHandler.TranslateFaultCode(JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode,System.ServiceModel.Channels.MessageVersion)">
            <summary>
            Translates the fault code based on the soap version.
            </summary>
            <param name="faultCode">The fault code.</param>
            <param name="messageVersion">The message version.</param>
            <returns>The FaultCode per soap version.</returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.SoapFaultHandler.TranslateFaultCode(System.ServiceModel.FaultCode,System.ServiceModel.Channels.MessageVersion)">
            <summary>
            Translates the fault code based on the soap version.
            </summary>
            <param name="faultCode">The fault code.</param>
            <param name="messageVersion">The message version.</param>
            <returns>The FaultCode per soap version.</returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.SoapFaultHandler.BuildFaultException(System.Exception,JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode)">
            <summary>
            Converts various exceptions generated by the application into a SoapException.  The SoapException
            is for use by the WSE/.NET framework to be converted into an actual SOAP Fault.
            This method centralizes the code that is responsible for creating the actual SoapException and is called by the
            overloaded handleException methods.
            SoapExceptions should not be passed to this method.
            </summary>
            <param name="exceptionToHandle">Incoming exception to create a SoapException around.</param>
            <param name="faultCode">The fault code of the SoapException.</param>
            <returns>
            A new FaultException based on the Exception that was passed in.
            </returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.SoapFaultHandler.TranslateFaultCode(JackHenry.Enterprise.Services.ServiceGateway.ExceptionHandling.FaultCode)">
            <summary>
            Translates the fault code.
            </summary>
            <param name="faultCode">The fault code.</param>
            <returns>The translated fault code.</returns>
        </member>
        <member name="T:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport">
            <summary>
            The iAdapterTransport class provides the functionality
            to deliver the platform's requests to the TCP socket backend
            host service.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.command">
            <summary>
            This is the command used in the iAdapter.
            (Currently this is always an Empty string)
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.securityKey">
            <summary>
            This is the securityKey that is configured for the port that the iAdapter is using.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.serverName">
            <summary>
            This is the name of the server that the iAdapter is installed on.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.serverPort">
            <summary>
            This is the port that will be used to communicate to the iAdapter.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.socketHeaderVersion">
            <summary>
            This is the version of the iAdapter's socket header format that will be used.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.institutionId">
            <summary>
            This is the provider's application institution identifier.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.endPoint">
            <summary>
            This is the endpoint that will be used to make a socket connection to the iAdapter.
            </summary>
        </member>
        <member name="F:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.useSSL">
            <summary>
            This is the flag that determines if SSl will be used to communicate to the iAdapter.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the iAdapterTransport class and sets the provider attributes
            </summary>
            <param name="servername">The servername.</param>
            <param name="serverport">The serverport.</param>
            <param name="securitykey">The securitykey.</param>
            <param name="institutionid">The institutionid.</param>
            <param name="socketheaderversion">The socketheaderversion.</param>
            <param name="usessl">if set to <c>true</c> [usessl].</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.SendRequest(System.String)">
            <summary>
            This method sends the request to the socket server and returns the response.
            </summary>
            <param name="request">The request to be sent to the socket server.</param>
            <returns>The response from the socket server.</returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.BuildRequestString(System.String)">
            <summary>
            Builds the request string.
            </summary>
            <param name="xmlRequest">XML request.</param>
            <returns>The request string to be sent to the provider.</returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.SetupEndPoint">
            <summary>
            This method sets up the endpoint of the socket server.
            </summary>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.CreateClient(System.Net.Sockets.TcpClient@)">
            <summary>
            This method creates a TcpClient and then connects to the configured server.
            </summary>
            <returns>A TcpClient object that is connected to the server.</returns>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.CloseClient(System.IO.Stream,System.Net.Security.SslStream,System.Net.Sockets.TcpClient)">
            <summary>
            This method closes the TcpClient object that is passed into it.
            </summary>
            <param name="stream">The Network stream to be closed.</param>
            <param name="sslStream">The SSL stream to be closed.</param>
            <param name="client">The Tcp client to be closed.</param>
        </member>
        <member name="M:JackHenry.Enterprise.Services.ServiceGateway.AgentComponents.Transports.iAdapterTransport.CertificateValidationCallback(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Certificates the validation callback.
            </summary>
            <param name="sender">The sender.</param>
            <param name="certificate">The certificate.</param>
            <param name="chain">The chain.</param>
            <param name="sslPolicyErrors">The SSL policy errors.</param>
            <returns>[true], if the certificate is valid; otherwise [false]</returns>
        </member>
    </members>
</doc>
